// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package newusb_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 7;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic [1:0]  q;
    } cbsr;
    struct packed {
      logic        q;
    } ple;
    struct packed {
      logic        q;
    } ie;
    struct packed {
      logic        q;
    } cle;
    struct packed {
      logic        q;
    } ble;
    struct packed {
      logic [1:0]  q;
    } hcfs;
    struct packed {
      logic        q;
    } ir;
    struct packed {
      logic        q;
    } rwc;
    struct packed {
      logic        q;
    } rwe;
  } newusb_reg2hw_hccontrol_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } hcr;
    struct packed {
      logic        q;
    } clf;
    struct packed {
      logic        q;
    } blf;
    struct packed {
      logic        q;
    } ocr;
  } newusb_reg2hw_hccommandstatus_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } so;
    struct packed {
      logic        q;
    } wdh;
    struct packed {
      logic        q;
    } sf;
    struct packed {
      logic        q;
    } rd;
    struct packed {
      logic        q;
    } ue;
    struct packed {
      logic        q;
    } fno;
    struct packed {
      logic        q;
    } rhsc;
    struct packed {
      logic        q;
    } oc;
  } newusb_reg2hw_hcinterruptstatus_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } so;
    struct packed {
      logic        q;
    } wdh;
    struct packed {
      logic        q;
    } sf;
    struct packed {
      logic        q;
    } rd;
    struct packed {
      logic        q;
    } ue;
    struct packed {
      logic        q;
    } fno;
    struct packed {
      logic        q;
    } rhcs;
    struct packed {
      logic        q;
    } oc;
    struct packed {
      logic        q;
    } mie;
  } newusb_reg2hw_hcinterruptenable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } so;
    struct packed {
      logic        q;
    } wdh;
    struct packed {
      logic        q;
    } sf;
    struct packed {
      logic        q;
    } rd;
    struct packed {
      logic        q;
    } ue;
    struct packed {
      logic        q;
    } fno;
    struct packed {
      logic        q;
    } rhcs;
    struct packed {
      logic        q;
    } oc;
    struct packed {
      logic        q;
    } mie;
  } newusb_reg2hw_hcinterruptdisable_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } zero;
    struct packed {
      logic [23:0] q;
    } hcca;
  } newusb_reg2hw_hchcaa_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  q;
    } zero;
    struct packed {
      logic [27:0] q;
    } pced;
  } newusb_reg2hw_hcperiodcurrented_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  q;
    } zero;
    struct packed {
      logic [27:0] q;
    } ched;
  } newusb_reg2hw_hccontrolheaded_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  q;
    } zero;
    struct packed {
      logic [27:0] q;
    } cced;
  } newusb_reg2hw_hccontrolcurrented_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  q;
    } zero;
    struct packed {
      logic [27:0] q;
    } bhed;
  } newusb_reg2hw_hcbulkheaded_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  q;
    } zero;
    struct packed {
      logic [27:0] q;
    } bced;
  } newusb_reg2hw_hcbulkcurrented_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  q;
    } zero;
    struct packed {
      logic [27:0] q;
    } dh;
  } newusb_reg2hw_hcdonehead_reg_t;

  typedef struct packed {
    struct packed {
      logic [13:0] q;
    } fi;
    struct packed {
      logic [1:0]  q;
    } reserved;
    struct packed {
      logic [14:0] q;
    } fsmps;
    struct packed {
      logic        q;
    } fit;
  } newusb_reg2hw_hcfminterval_reg_t;

  typedef struct packed {
    struct packed {
      logic [13:0] q;
    } fr;
    struct packed {
      logic [16:0] q;
    } reserved;
    struct packed {
      logic        q;
    } frt;
  } newusb_reg2hw_hcfmremaining_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } fn;
    struct packed {
      logic [15:0] q;
    } reserved;
  } newusb_reg2hw_hcfmnumber_reg_t;

  typedef struct packed {
    struct packed {
      logic [13:0] q;
    } ps;
    struct packed {
      logic [17:0] q;
    } reserved;
  } newusb_reg2hw_hcperiodicstart_reg_t;

  typedef struct packed {
    struct packed {
      logic [11:0] q;
    } lst;
    struct packed {
      logic [19:0] q;
    } reserved;
  } newusb_reg2hw_hclsthreshold_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } ndp;
    struct packed {
      logic        q;
    } nps;
    struct packed {
      logic        q;
    } psm;
    struct packed {
      logic        q;
    } dt;
    struct packed {
      logic        q;
    } ocpm;
    struct packed {
      logic        q;
    } nocp;
    struct packed {
      logic [10:0] q;
    } reserved;
    struct packed {
      logic [7:0]  q;
    } potpgt;
  } newusb_reg2hw_hcrhdescriptora_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } dr;
    struct packed {
      logic [15:0] q;
    } ppcm;
  } newusb_reg2hw_hcrhdescriptorb_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } lps;
    struct packed {
      logic        q;
    } oci;
    struct packed {
      logic [12:0] q;
    } reservedlower;
    struct packed {
      logic        q;
    } drwe;
    struct packed {
      logic        q;
    } lpsc;
    struct packed {
      logic        q;
    } ocic;
    struct packed {
      logic [12:0] q;
    } reservedupper;
    struct packed {
      logic        q;
    } crwe;
  } newusb_reg2hw_hcrhstatus_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } ccs;
    struct packed {
      logic        q;
    } pes;
    struct packed {
      logic        q;
    } pss;
    struct packed {
      logic        q;
    } poci;
    struct packed {
      logic        q;
    } prs;
    struct packed {
      logic [2:0]  q;
    } reservedlower;
    struct packed {
      logic        q;
    } pps;
    struct packed {
      logic        q;
    } lsda;
    struct packed {
      logic [5:0]  q;
    } reservedmid;
    struct packed {
      logic        q;
    } csc;
    struct packed {
      logic        q;
    } pesc;
    struct packed {
      logic        q;
    } pssc;
    struct packed {
      logic        q;
    } ocic;
    struct packed {
      logic        q;
    } prsc;
    struct packed {
      logic [10:0] q;
    } reservedupper;
  } newusb_reg2hw_hcrhportstatus_1_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } ccs;
    struct packed {
      logic        q;
    } pes;
    struct packed {
      logic        q;
    } pss;
    struct packed {
      logic        q;
    } poci;
    struct packed {
      logic        q;
    } prs;
    struct packed {
      logic [2:0]  q;
    } reservedlower;
    struct packed {
      logic        q;
    } pps;
    struct packed {
      logic        q;
    } lsda;
    struct packed {
      logic [5:0]  q;
    } reservedmid;
    struct packed {
      logic        q;
    } csc;
    struct packed {
      logic        q;
    } pesc;
    struct packed {
      logic        q;
    } pssc;
    struct packed {
      logic        q;
    } ocic;
    struct packed {
      logic        q;
    } prsc;
    struct packed {
      logic [10:0] q;
    } reservedupper;
  } newusb_reg2hw_hcrhportstatus_2_reg_t;

  typedef struct packed {
    struct packed {
      logic [1:0]  d;
    } cbsr;
    struct packed {
      logic        d;
    } ple;
    struct packed {
      logic        d;
    } ie;
    struct packed {
      logic        d;
    } cle;
    struct packed {
      logic        d;
    } ble;
    struct packed {
      logic [1:0]  d;
    } hcfs;
    struct packed {
      logic        d;
    } ir;
    struct packed {
      logic        d;
    } rwc;
    struct packed {
      logic        d;
    } rwe;
    struct packed {
      logic [20:0] d;
    } reserved;
  } newusb_hw2reg_hccontrol_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } hcr;
    struct packed {
      logic        d;
    } clf;
    struct packed {
      logic        d;
    } blf;
    struct packed {
      logic        d;
    } ocr;
    struct packed {
      logic [11:0] d;
    } reservedlower;
    struct packed {
      logic [1:0]  d;
    } soc;
    struct packed {
      logic [13:0] d;
    } reservedupper;
  } newusb_hw2reg_hccommandstatus_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } so;
    struct packed {
      logic        d;
    } wdh;
    struct packed {
      logic        d;
    } sf;
    struct packed {
      logic        d;
    } rd;
    struct packed {
      logic        d;
    } ue;
    struct packed {
      logic        d;
    } fno;
    struct packed {
      logic        d;
    } rhsc;
    struct packed {
      logic [22:0] d;
    } reservedlower;
    struct packed {
      logic        d;
    } oc;
    struct packed {
      logic        d;
    } reservedupper;
  } newusb_hw2reg_hcinterruptstatus_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } so;
    struct packed {
      logic        d;
    } wdh;
    struct packed {
      logic        d;
    } sf;
    struct packed {
      logic        d;
    } rd;
    struct packed {
      logic        d;
    } ue;
    struct packed {
      logic        d;
    } fno;
    struct packed {
      logic        d;
    } rhcs;
    struct packed {
      logic [22:0] d;
    } reserved;
    struct packed {
      logic        d;
    } oc;
    struct packed {
      logic        d;
    } mie;
  } newusb_hw2reg_hcinterruptenable_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } so;
    struct packed {
      logic        d;
    } wdh;
    struct packed {
      logic        d;
    } sf;
    struct packed {
      logic        d;
    } rd;
    struct packed {
      logic        d;
    } ue;
    struct packed {
      logic        d;
    } fno;
    struct packed {
      logic        d;
    } rhcs;
    struct packed {
      logic [22:0] d;
    } reserved;
    struct packed {
      logic        d;
    } oc;
    struct packed {
      logic        d;
    } mie;
  } newusb_hw2reg_hcinterruptdisable_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  d;
    } zero;
    struct packed {
      logic [23:0] d;
    } hcca;
  } newusb_hw2reg_hchcaa_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  d;
      logic        de;
    } zero;
    struct packed {
      logic [27:0] d;
      logic        de;
    } pced;
  } newusb_hw2reg_hcperiodcurrented_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  d;
      logic        de;
    } zero;
    struct packed {
      logic [27:0] d;
      logic        de;
    } ched;
  } newusb_hw2reg_hccontrolheaded_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  d;
      logic        de;
    } zero;
    struct packed {
      logic [27:0] d;
      logic        de;
    } cced;
  } newusb_hw2reg_hccontrolcurrented_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  d;
      logic        de;
    } zero;
    struct packed {
      logic [27:0] d;
      logic        de;
    } bhed;
  } newusb_hw2reg_hcbulkheaded_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  d;
      logic        de;
    } zero;
    struct packed {
      logic [27:0] d;
      logic        de;
    } bced;
  } newusb_hw2reg_hcbulkcurrented_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  d;
      logic        de;
    } zero;
    struct packed {
      logic [27:0] d;
      logic        de;
    } dh;
  } newusb_hw2reg_hcdonehead_reg_t;

  typedef struct packed {
    struct packed {
      logic [13:0] d;
      logic        de;
    } fi;
    struct packed {
      logic [1:0]  d;
      logic        de;
    } reserved;
    struct packed {
      logic [14:0] d;
      logic        de;
    } fsmps;
    struct packed {
      logic        d;
      logic        de;
    } fit;
  } newusb_hw2reg_hcfminterval_reg_t;

  typedef struct packed {
    struct packed {
      logic [13:0] d;
      logic        de;
    } fr;
    struct packed {
      logic [16:0] d;
      logic        de;
    } reserved;
    struct packed {
      logic        d;
      logic        de;
    } frt;
  } newusb_hw2reg_hcfmremaining_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] d;
      logic        de;
    } fn;
    struct packed {
      logic [15:0] d;
      logic        de;
    } reserved;
  } newusb_hw2reg_hcfmnumber_reg_t;

  typedef struct packed {
    struct packed {
      logic [13:0] d;
      logic        de;
    } ps;
    struct packed {
      logic [17:0] d;
      logic        de;
    } reserved;
  } newusb_hw2reg_hcperiodicstart_reg_t;

  typedef struct packed {
    struct packed {
      logic [11:0] d;
      logic        de;
    } lst;
    struct packed {
      logic [19:0] d;
      logic        de;
    } reserved;
  } newusb_hw2reg_hclsthreshold_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  d;
      logic        de;
    } ndp;
    struct packed {
      logic        d;
      logic        de;
    } nps;
    struct packed {
      logic        d;
      logic        de;
    } psm;
    struct packed {
      logic        d;
      logic        de;
    } dt;
    struct packed {
      logic        d;
      logic        de;
    } ocpm;
    struct packed {
      logic        d;
      logic        de;
    } nocp;
    struct packed {
      logic [10:0] d;
      logic        de;
    } reserved;
    struct packed {
      logic [7:0]  d;
      logic        de;
    } potpgt;
  } newusb_hw2reg_hcrhdescriptora_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] d;
      logic        de;
    } dr;
    struct packed {
      logic [15:0] d;
      logic        de;
    } ppcm;
  } newusb_hw2reg_hcrhdescriptorb_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } lps;
    struct packed {
      logic        d;
      logic        de;
    } oci;
    struct packed {
      logic [12:0] d;
      logic        de;
    } reservedlower;
    struct packed {
      logic        d;
      logic        de;
    } drwe;
    struct packed {
      logic        d;
      logic        de;
    } lpsc;
    struct packed {
      logic        d;
      logic        de;
    } ocic;
    struct packed {
      logic [12:0] d;
      logic        de;
    } reservedupper;
    struct packed {
      logic        d;
      logic        de;
    } crwe;
  } newusb_hw2reg_hcrhstatus_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } ccs;
    struct packed {
      logic        d;
      logic        de;
    } pes;
    struct packed {
      logic        d;
      logic        de;
    } pss;
    struct packed {
      logic        d;
      logic        de;
    } poci;
    struct packed {
      logic        d;
      logic        de;
    } prs;
    struct packed {
      logic [2:0]  d;
      logic        de;
    } reservedlower;
    struct packed {
      logic        d;
      logic        de;
    } pps;
    struct packed {
      logic        d;
      logic        de;
    } lsda;
    struct packed {
      logic [5:0]  d;
      logic        de;
    } reservedmid;
    struct packed {
      logic        d;
      logic        de;
    } csc;
    struct packed {
      logic        d;
      logic        de;
    } pesc;
    struct packed {
      logic        d;
      logic        de;
    } pssc;
    struct packed {
      logic        d;
      logic        de;
    } ocic;
    struct packed {
      logic        d;
      logic        de;
    } prsc;
    struct packed {
      logic [10:0] d;
      logic        de;
    } reservedupper;
  } newusb_hw2reg_hcrhportstatus_1_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } ccs;
    struct packed {
      logic        d;
      logic        de;
    } pes;
    struct packed {
      logic        d;
      logic        de;
    } pss;
    struct packed {
      logic        d;
      logic        de;
    } poci;
    struct packed {
      logic        d;
      logic        de;
    } prs;
    struct packed {
      logic [2:0]  d;
      logic        de;
    } reservedlower;
    struct packed {
      logic        d;
      logic        de;
    } pps;
    struct packed {
      logic        d;
      logic        de;
    } lsda;
    struct packed {
      logic [5:0]  d;
      logic        de;
    } reservedmid;
    struct packed {
      logic        d;
      logic        de;
    } csc;
    struct packed {
      logic        d;
      logic        de;
    } pesc;
    struct packed {
      logic        d;
      logic        de;
    } pssc;
    struct packed {
      logic        d;
      logic        de;
    } ocic;
    struct packed {
      logic        d;
      logic        de;
    } prsc;
    struct packed {
      logic [10:0] d;
      logic        de;
    } reservedupper;
  } newusb_hw2reg_hcrhportstatus_2_reg_t;

  // Register -> HW type
  typedef struct packed {
    newusb_reg2hw_hccontrol_reg_t hccontrol; // [584:574]
    newusb_reg2hw_hccommandstatus_reg_t hccommandstatus; // [573:570]
    newusb_reg2hw_hcinterruptstatus_reg_t hcinterruptstatus; // [569:562]
    newusb_reg2hw_hcinterruptenable_reg_t hcinterruptenable; // [561:553]
    newusb_reg2hw_hcinterruptdisable_reg_t hcinterruptdisable; // [552:544]
    newusb_reg2hw_hchcaa_reg_t hchcaa; // [543:512]
    newusb_reg2hw_hcperiodcurrented_reg_t hcperiodcurrented; // [511:480]
    newusb_reg2hw_hccontrolheaded_reg_t hccontrolheaded; // [479:448]
    newusb_reg2hw_hccontrolcurrented_reg_t hccontrolcurrented; // [447:416]
    newusb_reg2hw_hcbulkheaded_reg_t hcbulkheaded; // [415:384]
    newusb_reg2hw_hcbulkcurrented_reg_t hcbulkcurrented; // [383:352]
    newusb_reg2hw_hcdonehead_reg_t hcdonehead; // [351:320]
    newusb_reg2hw_hcfminterval_reg_t hcfminterval; // [319:288]
    newusb_reg2hw_hcfmremaining_reg_t hcfmremaining; // [287:256]
    newusb_reg2hw_hcfmnumber_reg_t hcfmnumber; // [255:224]
    newusb_reg2hw_hcperiodicstart_reg_t hcperiodicstart; // [223:192]
    newusb_reg2hw_hclsthreshold_reg_t hclsthreshold; // [191:160]
    newusb_reg2hw_hcrhdescriptora_reg_t hcrhdescriptora; // [159:128]
    newusb_reg2hw_hcrhdescriptorb_reg_t hcrhdescriptorb; // [127:96]
    newusb_reg2hw_hcrhstatus_reg_t hcrhstatus; // [95:64]
    newusb_reg2hw_hcrhportstatus_1_reg_t hcrhportstatus_1; // [63:32]
    newusb_reg2hw_hcrhportstatus_2_reg_t hcrhportstatus_2; // [31:0]
  } newusb_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    newusb_hw2reg_hccontrol_reg_t hccontrol; // [776:745]
    newusb_hw2reg_hccommandstatus_reg_t hccommandstatus; // [744:713]
    newusb_hw2reg_hcinterruptstatus_reg_t hcinterruptstatus; // [712:681]
    newusb_hw2reg_hcinterruptenable_reg_t hcinterruptenable; // [680:649]
    newusb_hw2reg_hcinterruptdisable_reg_t hcinterruptdisable; // [648:617]
    newusb_hw2reg_hchcaa_reg_t hchcaa; // [616:585]
    newusb_hw2reg_hcperiodcurrented_reg_t hcperiodcurrented; // [584:551]
    newusb_hw2reg_hccontrolheaded_reg_t hccontrolheaded; // [550:517]
    newusb_hw2reg_hccontrolcurrented_reg_t hccontrolcurrented; // [516:483]
    newusb_hw2reg_hcbulkheaded_reg_t hcbulkheaded; // [482:449]
    newusb_hw2reg_hcbulkcurrented_reg_t hcbulkcurrented; // [448:415]
    newusb_hw2reg_hcdonehead_reg_t hcdonehead; // [414:381]
    newusb_hw2reg_hcfminterval_reg_t hcfminterval; // [380:345]
    newusb_hw2reg_hcfmremaining_reg_t hcfmremaining; // [344:310]
    newusb_hw2reg_hcfmnumber_reg_t hcfmnumber; // [309:276]
    newusb_hw2reg_hcperiodicstart_reg_t hcperiodicstart; // [275:242]
    newusb_hw2reg_hclsthreshold_reg_t hclsthreshold; // [241:208]
    newusb_hw2reg_hcrhdescriptora_reg_t hcrhdescriptora; // [207:168]
    newusb_hw2reg_hcrhdescriptorb_reg_t hcrhdescriptorb; // [167:134]
    newusb_hw2reg_hcrhstatus_reg_t hcrhstatus; // [133:94]
    newusb_hw2reg_hcrhportstatus_1_reg_t hcrhportstatus_1; // [93:47]
    newusb_hw2reg_hcrhportstatus_2_reg_t hcrhportstatus_2; // [46:0]
  } newusb_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] NEWUSB_HCREVISION_OFFSET = 7'h 0;
  parameter logic [BlockAw-1:0] NEWUSB_HCCONTROL_OFFSET = 7'h 4;
  parameter logic [BlockAw-1:0] NEWUSB_HCCOMMANDSTATUS_OFFSET = 7'h 8;
  parameter logic [BlockAw-1:0] NEWUSB_HCINTERRUPTSTATUS_OFFSET = 7'h c;
  parameter logic [BlockAw-1:0] NEWUSB_HCINTERRUPTENABLE_OFFSET = 7'h 10;
  parameter logic [BlockAw-1:0] NEWUSB_HCINTERRUPTDISABLE_OFFSET = 7'h 14;
  parameter logic [BlockAw-1:0] NEWUSB_HCHCAA_OFFSET = 7'h 18;
  parameter logic [BlockAw-1:0] NEWUSB_HCPERIODCURRENTED_OFFSET = 7'h 1c;
  parameter logic [BlockAw-1:0] NEWUSB_HCCONTROLHEADED_OFFSET = 7'h 20;
  parameter logic [BlockAw-1:0] NEWUSB_HCCONTROLCURRENTED_OFFSET = 7'h 24;
  parameter logic [BlockAw-1:0] NEWUSB_HCBULKHEADED_OFFSET = 7'h 28;
  parameter logic [BlockAw-1:0] NEWUSB_HCBULKCURRENTED_OFFSET = 7'h 2c;
  parameter logic [BlockAw-1:0] NEWUSB_HCDONEHEAD_OFFSET = 7'h 30;
  parameter logic [BlockAw-1:0] NEWUSB_HCFMINTERVAL_OFFSET = 7'h 34;
  parameter logic [BlockAw-1:0] NEWUSB_HCFMREMAINING_OFFSET = 7'h 38;
  parameter logic [BlockAw-1:0] NEWUSB_HCFMNUMBER_OFFSET = 7'h 3c;
  parameter logic [BlockAw-1:0] NEWUSB_HCPERIODICSTART_OFFSET = 7'h 40;
  parameter logic [BlockAw-1:0] NEWUSB_HCLSTHRESHOLD_OFFSET = 7'h 44;
  parameter logic [BlockAw-1:0] NEWUSB_HCRHDESCRIPTORA_OFFSET = 7'h 48;
  parameter logic [BlockAw-1:0] NEWUSB_HCRHDESCRIPTORB_OFFSET = 7'h 4c;
  parameter logic [BlockAw-1:0] NEWUSB_HCRHSTATUS_OFFSET = 7'h 50;
  parameter logic [BlockAw-1:0] NEWUSB_HCRHPORTSTATUS_1_OFFSET = 7'h 54;
  parameter logic [BlockAw-1:0] NEWUSB_HCRHPORTSTATUS_2_OFFSET = 7'h 58;

  // Reset values for hwext registers and their fields
  parameter logic [31:0] NEWUSB_HCCONTROL_RESVAL = 32'h 0;
  parameter logic [1:0] NEWUSB_HCCONTROL_CBSR_RESVAL = 2'h 0;
  parameter logic [0:0] NEWUSB_HCCONTROL_PLE_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCCONTROL_IE_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCCONTROL_CLE_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCCONTROL_BLE_RESVAL = 1'h 0;
  parameter logic [1:0] NEWUSB_HCCONTROL_HCFS_RESVAL = 2'h 0;
  parameter logic [0:0] NEWUSB_HCCONTROL_IR_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCCONTROL_RWC_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCCONTROL_RWE_RESVAL = 1'h 0;
  parameter logic [20:0] NEWUSB_HCCONTROL_RESERVED_RESVAL = 21'h 0;
  parameter logic [31:0] NEWUSB_HCCOMMANDSTATUS_RESVAL = 32'h 0;
  parameter logic [0:0] NEWUSB_HCCOMMANDSTATUS_HCR_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCCOMMANDSTATUS_CLF_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCCOMMANDSTATUS_BLF_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCCOMMANDSTATUS_OCR_RESVAL = 1'h 0;
  parameter logic [11:0] NEWUSB_HCCOMMANDSTATUS_RESERVEDLOWER_RESVAL = 12'h 0;
  parameter logic [1:0] NEWUSB_HCCOMMANDSTATUS_SOC_RESVAL = 2'h 0;
  parameter logic [13:0] NEWUSB_HCCOMMANDSTATUS_RESERVEDUPPER_RESVAL = 14'h 0;
  parameter logic [31:0] NEWUSB_HCINTERRUPTSTATUS_RESVAL = 32'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTSTATUS_SO_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTSTATUS_WDH_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTSTATUS_SF_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTSTATUS_RD_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTSTATUS_UE_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTSTATUS_FNO_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTSTATUS_RHSC_RESVAL = 1'h 0;
  parameter logic [22:0] NEWUSB_HCINTERRUPTSTATUS_RESERVEDLOWER_RESVAL = 23'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTSTATUS_OC_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTSTATUS_RESERVEDUPPER_RESVAL = 1'h 0;
  parameter logic [31:0] NEWUSB_HCINTERRUPTENABLE_RESVAL = 32'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTENABLE_SO_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTENABLE_WDH_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTENABLE_SF_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTENABLE_RD_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTENABLE_UE_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTENABLE_FNO_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTENABLE_RHCS_RESVAL = 1'h 0;
  parameter logic [22:0] NEWUSB_HCINTERRUPTENABLE_RESERVED_RESVAL = 23'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTENABLE_OC_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTENABLE_MIE_RESVAL = 1'h 0;
  parameter logic [31:0] NEWUSB_HCINTERRUPTDISABLE_RESVAL = 32'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTDISABLE_SO_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTDISABLE_WDH_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTDISABLE_SF_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTDISABLE_RD_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTDISABLE_UE_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTDISABLE_FNO_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTDISABLE_RHCS_RESVAL = 1'h 0;
  parameter logic [22:0] NEWUSB_HCINTERRUPTDISABLE_RESERVED_RESVAL = 23'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTDISABLE_OC_RESVAL = 1'h 0;
  parameter logic [0:0] NEWUSB_HCINTERRUPTDISABLE_MIE_RESVAL = 1'h 0;
  parameter logic [31:0] NEWUSB_HCHCAA_RESVAL = 32'h 0;
  parameter logic [7:0] NEWUSB_HCHCAA_ZERO_RESVAL = 8'h 0;
  parameter logic [23:0] NEWUSB_HCHCAA_HCCA_RESVAL = 24'h 0;

  // Register index
  typedef enum int {
    NEWUSB_HCREVISION,
    NEWUSB_HCCONTROL,
    NEWUSB_HCCOMMANDSTATUS,
    NEWUSB_HCINTERRUPTSTATUS,
    NEWUSB_HCINTERRUPTENABLE,
    NEWUSB_HCINTERRUPTDISABLE,
    NEWUSB_HCHCAA,
    NEWUSB_HCPERIODCURRENTED,
    NEWUSB_HCCONTROLHEADED,
    NEWUSB_HCCONTROLCURRENTED,
    NEWUSB_HCBULKHEADED,
    NEWUSB_HCBULKCURRENTED,
    NEWUSB_HCDONEHEAD,
    NEWUSB_HCFMINTERVAL,
    NEWUSB_HCFMREMAINING,
    NEWUSB_HCFMNUMBER,
    NEWUSB_HCPERIODICSTART,
    NEWUSB_HCLSTHRESHOLD,
    NEWUSB_HCRHDESCRIPTORA,
    NEWUSB_HCRHDESCRIPTORB,
    NEWUSB_HCRHSTATUS,
    NEWUSB_HCRHPORTSTATUS_1,
    NEWUSB_HCRHPORTSTATUS_2
  } newusb_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] NEWUSB_PERMIT [23] = '{
    4'b 1111, // index[ 0] NEWUSB_HCREVISION
    4'b 1111, // index[ 1] NEWUSB_HCCONTROL
    4'b 1111, // index[ 2] NEWUSB_HCCOMMANDSTATUS
    4'b 1111, // index[ 3] NEWUSB_HCINTERRUPTSTATUS
    4'b 1111, // index[ 4] NEWUSB_HCINTERRUPTENABLE
    4'b 1111, // index[ 5] NEWUSB_HCINTERRUPTDISABLE
    4'b 1111, // index[ 6] NEWUSB_HCHCAA
    4'b 1111, // index[ 7] NEWUSB_HCPERIODCURRENTED
    4'b 1111, // index[ 8] NEWUSB_HCCONTROLHEADED
    4'b 1111, // index[ 9] NEWUSB_HCCONTROLCURRENTED
    4'b 1111, // index[10] NEWUSB_HCBULKHEADED
    4'b 1111, // index[11] NEWUSB_HCBULKCURRENTED
    4'b 1111, // index[12] NEWUSB_HCDONEHEAD
    4'b 1111, // index[13] NEWUSB_HCFMINTERVAL
    4'b 1111, // index[14] NEWUSB_HCFMREMAINING
    4'b 1111, // index[15] NEWUSB_HCFMNUMBER
    4'b 1111, // index[16] NEWUSB_HCPERIODICSTART
    4'b 1111, // index[17] NEWUSB_HCLSTHRESHOLD
    4'b 1111, // index[18] NEWUSB_HCRHDESCRIPTORA
    4'b 1111, // index[19] NEWUSB_HCRHDESCRIPTORB
    4'b 1111, // index[20] NEWUSB_HCRHSTATUS
    4'b 1111, // index[21] NEWUSB_HCRHPORTSTATUS_1
    4'b 1111  // index[22] NEWUSB_HCRHPORTSTATUS_2
  };

endpackage

