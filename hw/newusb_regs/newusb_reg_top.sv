// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module newusb_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 7
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output newusb_reg_pkg::newusb_reg2hw_t reg2hw, // Write
  input  newusb_reg_pkg::newusb_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import newusb_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [7:0] hcrevision_rev_qs;
  logic [23:0] hcrevision_reserved_qs;
  logic [1:0] hccontrol_cbsr_qs;
  logic [1:0] hccontrol_cbsr_wd;
  logic hccontrol_cbsr_we;
  logic hccontrol_cbsr_re;
  logic hccontrol_ple_qs;
  logic hccontrol_ple_wd;
  logic hccontrol_ple_we;
  logic hccontrol_ple_re;
  logic hccontrol_ie_qs;
  logic hccontrol_ie_wd;
  logic hccontrol_ie_we;
  logic hccontrol_ie_re;
  logic hccontrol_cle_qs;
  logic hccontrol_cle_wd;
  logic hccontrol_cle_we;
  logic hccontrol_cle_re;
  logic hccontrol_ble_qs;
  logic hccontrol_ble_wd;
  logic hccontrol_ble_we;
  logic hccontrol_ble_re;
  logic [1:0] hccontrol_hcfs_qs;
  logic [1:0] hccontrol_hcfs_wd;
  logic hccontrol_hcfs_we;
  logic hccontrol_hcfs_re;
  logic hccontrol_ir_qs;
  logic hccontrol_ir_wd;
  logic hccontrol_ir_we;
  logic hccontrol_ir_re;
  logic hccontrol_rwc_qs;
  logic hccontrol_rwc_wd;
  logic hccontrol_rwc_we;
  logic hccontrol_rwc_re;
  logic hccontrol_rwe_qs;
  logic hccontrol_rwe_wd;
  logic hccontrol_rwe_we;
  logic hccontrol_rwe_re;
  logic [20:0] hccontrol_reserved_qs;
  logic hccontrol_reserved_re;
  logic hccommandstatus_hcr_qs;
  logic hccommandstatus_hcr_wd;
  logic hccommandstatus_hcr_we;
  logic hccommandstatus_hcr_re;
  logic hccommandstatus_clf_qs;
  logic hccommandstatus_clf_wd;
  logic hccommandstatus_clf_we;
  logic hccommandstatus_clf_re;
  logic hccommandstatus_blf_qs;
  logic hccommandstatus_blf_wd;
  logic hccommandstatus_blf_we;
  logic hccommandstatus_blf_re;
  logic hccommandstatus_ocr_qs;
  logic hccommandstatus_ocr_wd;
  logic hccommandstatus_ocr_we;
  logic hccommandstatus_ocr_re;
  logic [11:0] hccommandstatus_reservedlower_qs;
  logic hccommandstatus_reservedlower_re;
  logic [1:0] hccommandstatus_soc_qs;
  logic hccommandstatus_soc_re;
  logic [13:0] hccommandstatus_reservedupper_qs;
  logic hccommandstatus_reservedupper_re;
  logic hcinterruptstatus_so_qs;
  logic hcinterruptstatus_so_wd;
  logic hcinterruptstatus_so_we;
  logic hcinterruptstatus_so_re;
  logic hcinterruptstatus_wdh_qs;
  logic hcinterruptstatus_wdh_wd;
  logic hcinterruptstatus_wdh_we;
  logic hcinterruptstatus_wdh_re;
  logic hcinterruptstatus_sf_qs;
  logic hcinterruptstatus_sf_wd;
  logic hcinterruptstatus_sf_we;
  logic hcinterruptstatus_sf_re;
  logic hcinterruptstatus_rd_qs;
  logic hcinterruptstatus_rd_wd;
  logic hcinterruptstatus_rd_we;
  logic hcinterruptstatus_rd_re;
  logic hcinterruptstatus_ue_qs;
  logic hcinterruptstatus_ue_wd;
  logic hcinterruptstatus_ue_we;
  logic hcinterruptstatus_ue_re;
  logic hcinterruptstatus_fno_qs;
  logic hcinterruptstatus_fno_wd;
  logic hcinterruptstatus_fno_we;
  logic hcinterruptstatus_fno_re;
  logic hcinterruptstatus_rhsc_qs;
  logic hcinterruptstatus_rhsc_wd;
  logic hcinterruptstatus_rhsc_we;
  logic hcinterruptstatus_rhsc_re;
  logic [22:0] hcinterruptstatus_reservedlower_qs;
  logic hcinterruptstatus_reservedlower_re;
  logic hcinterruptstatus_oc_qs;
  logic hcinterruptstatus_oc_wd;
  logic hcinterruptstatus_oc_we;
  logic hcinterruptstatus_oc_re;
  logic hcinterruptstatus_reservedupper_qs;
  logic hcinterruptstatus_reservedupper_re;
  logic hcinterruptenable_so_qs;
  logic hcinterruptenable_so_wd;
  logic hcinterruptenable_so_we;
  logic hcinterruptenable_so_re;
  logic hcinterruptenable_wdh_qs;
  logic hcinterruptenable_wdh_wd;
  logic hcinterruptenable_wdh_we;
  logic hcinterruptenable_wdh_re;
  logic hcinterruptenable_sf_qs;
  logic hcinterruptenable_sf_wd;
  logic hcinterruptenable_sf_we;
  logic hcinterruptenable_sf_re;
  logic hcinterruptenable_rd_qs;
  logic hcinterruptenable_rd_wd;
  logic hcinterruptenable_rd_we;
  logic hcinterruptenable_rd_re;
  logic hcinterruptenable_ue_qs;
  logic hcinterruptenable_ue_wd;
  logic hcinterruptenable_ue_we;
  logic hcinterruptenable_ue_re;
  logic hcinterruptenable_fno_qs;
  logic hcinterruptenable_fno_wd;
  logic hcinterruptenable_fno_we;
  logic hcinterruptenable_fno_re;
  logic hcinterruptenable_rhcs_qs;
  logic hcinterruptenable_rhcs_wd;
  logic hcinterruptenable_rhcs_we;
  logic hcinterruptenable_rhcs_re;
  logic [22:0] hcinterruptenable_reserved_qs;
  logic hcinterruptenable_reserved_re;
  logic hcinterruptenable_oc_qs;
  logic hcinterruptenable_oc_wd;
  logic hcinterruptenable_oc_we;
  logic hcinterruptenable_oc_re;
  logic hcinterruptenable_mie_qs;
  logic hcinterruptenable_mie_wd;
  logic hcinterruptenable_mie_we;
  logic hcinterruptenable_mie_re;
  logic hcinterruptdisable_so_qs;
  logic hcinterruptdisable_so_wd;
  logic hcinterruptdisable_so_we;
  logic hcinterruptdisable_so_re;
  logic hcinterruptdisable_wdh_qs;
  logic hcinterruptdisable_wdh_wd;
  logic hcinterruptdisable_wdh_we;
  logic hcinterruptdisable_wdh_re;
  logic hcinterruptdisable_sf_qs;
  logic hcinterruptdisable_sf_wd;
  logic hcinterruptdisable_sf_we;
  logic hcinterruptdisable_sf_re;
  logic hcinterruptdisable_rd_qs;
  logic hcinterruptdisable_rd_wd;
  logic hcinterruptdisable_rd_we;
  logic hcinterruptdisable_rd_re;
  logic hcinterruptdisable_ue_qs;
  logic hcinterruptdisable_ue_wd;
  logic hcinterruptdisable_ue_we;
  logic hcinterruptdisable_ue_re;
  logic hcinterruptdisable_fno_qs;
  logic hcinterruptdisable_fno_wd;
  logic hcinterruptdisable_fno_we;
  logic hcinterruptdisable_fno_re;
  logic hcinterruptdisable_rhcs_qs;
  logic hcinterruptdisable_rhcs_wd;
  logic hcinterruptdisable_rhcs_we;
  logic hcinterruptdisable_rhcs_re;
  logic [22:0] hcinterruptdisable_reserved_qs;
  logic hcinterruptdisable_reserved_re;
  logic hcinterruptdisable_oc_qs;
  logic hcinterruptdisable_oc_wd;
  logic hcinterruptdisable_oc_we;
  logic hcinterruptdisable_oc_re;
  logic hcinterruptdisable_mie_qs;
  logic hcinterruptdisable_mie_wd;
  logic hcinterruptdisable_mie_we;
  logic hcinterruptdisable_mie_re;
  logic [7:0] hchcaa_zero_qs;
  logic [7:0] hchcaa_zero_wd;
  logic hchcaa_zero_we;
  logic hchcaa_zero_re;
  logic [23:0] hchcaa_hcca_qs;
  logic [23:0] hchcaa_hcca_wd;
  logic hchcaa_hcca_we;
  logic hchcaa_hcca_re;
  logic [3:0] hcperiodcurrented_zero_qs;
  logic [27:0] hcperiodcurrented_pced_qs;
  logic [3:0] hccontrolheaded_zero_qs;
  logic [3:0] hccontrolheaded_zero_wd;
  logic hccontrolheaded_zero_we;
  logic [27:0] hccontrolheaded_ched_qs;
  logic [27:0] hccontrolheaded_ched_wd;
  logic hccontrolheaded_ched_we;
  logic [3:0] hccontrolcurrented_zero_qs;
  logic [3:0] hccontrolcurrented_zero_wd;
  logic hccontrolcurrented_zero_we;
  logic [27:0] hccontrolcurrented_cced_qs;
  logic [27:0] hccontrolcurrented_cced_wd;
  logic hccontrolcurrented_cced_we;
  logic [3:0] hcbulkheaded_zero_qs;
  logic [3:0] hcbulkheaded_zero_wd;
  logic hcbulkheaded_zero_we;
  logic [27:0] hcbulkheaded_bhed_qs;
  logic [27:0] hcbulkheaded_bhed_wd;
  logic hcbulkheaded_bhed_we;
  logic [3:0] hcbulkcurrented_zero_qs;
  logic [3:0] hcbulkcurrented_zero_wd;
  logic hcbulkcurrented_zero_we;
  logic [27:0] hcbulkcurrented_bced_qs;
  logic [27:0] hcbulkcurrented_bced_wd;
  logic hcbulkcurrented_bced_we;
  logic [3:0] hcdonehead_zero_qs;
  logic [27:0] hcdonehead_dh_qs;
  logic [13:0] hcfminterval_fi_qs;
  logic [13:0] hcfminterval_fi_wd;
  logic hcfminterval_fi_we;
  logic [1:0] hcfminterval_reserved_qs;
  logic [14:0] hcfminterval_fsmps_qs;
  logic [14:0] hcfminterval_fsmps_wd;
  logic hcfminterval_fsmps_we;
  logic hcfminterval_fit_qs;
  logic hcfminterval_fit_wd;
  logic hcfminterval_fit_we;
  logic [13:0] hcfmremaining_fr_qs;
  logic [16:0] hcfmremaining_reserved_qs;
  logic hcfmremaining_frt_qs;
  logic [15:0] hcfmnumber_fn_qs;
  logic [15:0] hcfmnumber_reserved_qs;
  logic [13:0] hcperiodicstart_ps_qs;
  logic [13:0] hcperiodicstart_ps_wd;
  logic hcperiodicstart_ps_we;
  logic [17:0] hcperiodicstart_reserved_qs;
  logic [11:0] hclsthreshold_lst_qs;
  logic [11:0] hclsthreshold_lst_wd;
  logic hclsthreshold_lst_we;
  logic [19:0] hclsthreshold_reserved_qs;
  logic [7:0] hcrhdescriptora_ndp_qs;
  logic hcrhdescriptora_nps_qs;
  logic hcrhdescriptora_nps_wd;
  logic hcrhdescriptora_nps_we;
  logic hcrhdescriptora_psm_qs;
  logic hcrhdescriptora_psm_wd;
  logic hcrhdescriptora_psm_we;
  logic hcrhdescriptora_dt_qs;
  logic hcrhdescriptora_ocpm_qs;
  logic hcrhdescriptora_ocpm_wd;
  logic hcrhdescriptora_ocpm_we;
  logic hcrhdescriptora_nocp_qs;
  logic hcrhdescriptora_nocp_wd;
  logic hcrhdescriptora_nocp_we;
  logic [10:0] hcrhdescriptora_reserved_qs;
  logic [7:0] hcrhdescriptora_potpgt_qs;
  logic [7:0] hcrhdescriptora_potpgt_wd;
  logic hcrhdescriptora_potpgt_we;
  logic [15:0] hcrhdescriptorb_dr_qs;
  logic [15:0] hcrhdescriptorb_dr_wd;
  logic hcrhdescriptorb_dr_we;
  logic [15:0] hcrhdescriptorb_ppcm_qs;
  logic [15:0] hcrhdescriptorb_ppcm_wd;
  logic hcrhdescriptorb_ppcm_we;
  logic hcrhstatus_lps_qs;
  logic hcrhstatus_lps_wd;
  logic hcrhstatus_lps_we;
  logic hcrhstatus_oci_qs;
  logic [12:0] hcrhstatus_reservedlower_qs;
  logic hcrhstatus_drwe_qs;
  logic hcrhstatus_drwe_wd;
  logic hcrhstatus_drwe_we;
  logic hcrhstatus_lpsc_qs;
  logic hcrhstatus_lpsc_wd;
  logic hcrhstatus_lpsc_we;
  logic hcrhstatus_ocic_qs;
  logic hcrhstatus_ocic_wd;
  logic hcrhstatus_ocic_we;
  logic [12:0] hcrhstatus_reservedupper_qs;
  logic hcrhstatus_crwe_wd;
  logic hcrhstatus_crwe_we;
  logic hcrhportstatus_1_ccs_qs;
  logic hcrhportstatus_1_ccs_wd;
  logic hcrhportstatus_1_ccs_we;
  logic hcrhportstatus_1_pes_qs;
  logic hcrhportstatus_1_pes_wd;
  logic hcrhportstatus_1_pes_we;
  logic hcrhportstatus_1_pss_qs;
  logic hcrhportstatus_1_pss_wd;
  logic hcrhportstatus_1_pss_we;
  logic hcrhportstatus_1_poci_qs;
  logic hcrhportstatus_1_poci_wd;
  logic hcrhportstatus_1_poci_we;
  logic hcrhportstatus_1_prs_qs;
  logic hcrhportstatus_1_prs_wd;
  logic hcrhportstatus_1_prs_we;
  logic [2:0] hcrhportstatus_1_reservedlower_qs;
  logic hcrhportstatus_1_pps_qs;
  logic hcrhportstatus_1_pps_wd;
  logic hcrhportstatus_1_pps_we;
  logic hcrhportstatus_1_lsda_qs;
  logic hcrhportstatus_1_lsda_wd;
  logic hcrhportstatus_1_lsda_we;
  logic [5:0] hcrhportstatus_1_reservedmid_qs;
  logic hcrhportstatus_1_csc_qs;
  logic hcrhportstatus_1_csc_wd;
  logic hcrhportstatus_1_csc_we;
  logic hcrhportstatus_1_pesc_qs;
  logic hcrhportstatus_1_pesc_wd;
  logic hcrhportstatus_1_pesc_we;
  logic hcrhportstatus_1_pssc_qs;
  logic hcrhportstatus_1_pssc_wd;
  logic hcrhportstatus_1_pssc_we;
  logic hcrhportstatus_1_ocic_qs;
  logic hcrhportstatus_1_ocic_wd;
  logic hcrhportstatus_1_ocic_we;
  logic hcrhportstatus_1_prsc_qs;
  logic hcrhportstatus_1_prsc_wd;
  logic hcrhportstatus_1_prsc_we;
  logic [10:0] hcrhportstatus_1_reservedupper_qs;
  logic hcrhportstatus_2_ccs_qs;
  logic hcrhportstatus_2_ccs_wd;
  logic hcrhportstatus_2_ccs_we;
  logic hcrhportstatus_2_pes_qs;
  logic hcrhportstatus_2_pes_wd;
  logic hcrhportstatus_2_pes_we;
  logic hcrhportstatus_2_pss_qs;
  logic hcrhportstatus_2_pss_wd;
  logic hcrhportstatus_2_pss_we;
  logic hcrhportstatus_2_poci_qs;
  logic hcrhportstatus_2_poci_wd;
  logic hcrhportstatus_2_poci_we;
  logic hcrhportstatus_2_prs_qs;
  logic hcrhportstatus_2_prs_wd;
  logic hcrhportstatus_2_prs_we;
  logic [2:0] hcrhportstatus_2_reservedlower_qs;
  logic hcrhportstatus_2_pps_qs;
  logic hcrhportstatus_2_pps_wd;
  logic hcrhportstatus_2_pps_we;
  logic hcrhportstatus_2_lsda_qs;
  logic hcrhportstatus_2_lsda_wd;
  logic hcrhportstatus_2_lsda_we;
  logic [5:0] hcrhportstatus_2_reservedmid_qs;
  logic hcrhportstatus_2_csc_qs;
  logic hcrhportstatus_2_csc_wd;
  logic hcrhportstatus_2_csc_we;
  logic hcrhportstatus_2_pesc_qs;
  logic hcrhportstatus_2_pesc_wd;
  logic hcrhportstatus_2_pesc_we;
  logic hcrhportstatus_2_pssc_qs;
  logic hcrhportstatus_2_pssc_wd;
  logic hcrhportstatus_2_pssc_we;
  logic hcrhportstatus_2_ocic_qs;
  logic hcrhportstatus_2_ocic_wd;
  logic hcrhportstatus_2_ocic_we;
  logic hcrhportstatus_2_prsc_qs;
  logic hcrhportstatus_2_prsc_wd;
  logic hcrhportstatus_2_prsc_we;
  logic [10:0] hcrhportstatus_2_reservedupper_qs;
  logic hcrhportstatus_3_ccs_qs;
  logic hcrhportstatus_3_ccs_wd;
  logic hcrhportstatus_3_ccs_we;
  logic hcrhportstatus_3_pes_qs;
  logic hcrhportstatus_3_pes_wd;
  logic hcrhportstatus_3_pes_we;
  logic hcrhportstatus_3_pss_qs;
  logic hcrhportstatus_3_pss_wd;
  logic hcrhportstatus_3_pss_we;
  logic hcrhportstatus_3_poci_qs;
  logic hcrhportstatus_3_poci_wd;
  logic hcrhportstatus_3_poci_we;
  logic hcrhportstatus_3_prs_qs;
  logic hcrhportstatus_3_prs_wd;
  logic hcrhportstatus_3_prs_we;
  logic [2:0] hcrhportstatus_3_reservedlower_qs;
  logic hcrhportstatus_3_pps_qs;
  logic hcrhportstatus_3_pps_wd;
  logic hcrhportstatus_3_pps_we;
  logic hcrhportstatus_3_lsda_qs;
  logic hcrhportstatus_3_lsda_wd;
  logic hcrhportstatus_3_lsda_we;
  logic [5:0] hcrhportstatus_3_reservedmid_qs;
  logic hcrhportstatus_3_csc_qs;
  logic hcrhportstatus_3_csc_wd;
  logic hcrhportstatus_3_csc_we;
  logic hcrhportstatus_3_pesc_qs;
  logic hcrhportstatus_3_pesc_wd;
  logic hcrhportstatus_3_pesc_we;
  logic hcrhportstatus_3_pssc_qs;
  logic hcrhportstatus_3_pssc_wd;
  logic hcrhportstatus_3_pssc_we;
  logic hcrhportstatus_3_ocic_qs;
  logic hcrhportstatus_3_ocic_wd;
  logic hcrhportstatus_3_ocic_we;
  logic hcrhportstatus_3_prsc_qs;
  logic hcrhportstatus_3_prsc_wd;
  logic hcrhportstatus_3_prsc_we;
  logic [10:0] hcrhportstatus_3_reservedupper_qs;
  logic hcrhportstatus_4_ccs_qs;
  logic hcrhportstatus_4_ccs_wd;
  logic hcrhportstatus_4_ccs_we;
  logic hcrhportstatus_4_pes_qs;
  logic hcrhportstatus_4_pes_wd;
  logic hcrhportstatus_4_pes_we;
  logic hcrhportstatus_4_pss_qs;
  logic hcrhportstatus_4_pss_wd;
  logic hcrhportstatus_4_pss_we;
  logic hcrhportstatus_4_poci_qs;
  logic hcrhportstatus_4_poci_wd;
  logic hcrhportstatus_4_poci_we;
  logic hcrhportstatus_4_prs_qs;
  logic hcrhportstatus_4_prs_wd;
  logic hcrhportstatus_4_prs_we;
  logic [2:0] hcrhportstatus_4_reservedlower_qs;
  logic hcrhportstatus_4_pps_qs;
  logic hcrhportstatus_4_pps_wd;
  logic hcrhportstatus_4_pps_we;
  logic hcrhportstatus_4_lsda_qs;
  logic hcrhportstatus_4_lsda_wd;
  logic hcrhportstatus_4_lsda_we;
  logic [5:0] hcrhportstatus_4_reservedmid_qs;
  logic hcrhportstatus_4_csc_qs;
  logic hcrhportstatus_4_csc_wd;
  logic hcrhportstatus_4_csc_we;
  logic hcrhportstatus_4_pesc_qs;
  logic hcrhportstatus_4_pesc_wd;
  logic hcrhportstatus_4_pesc_we;
  logic hcrhportstatus_4_pssc_qs;
  logic hcrhportstatus_4_pssc_wd;
  logic hcrhportstatus_4_pssc_we;
  logic hcrhportstatus_4_ocic_qs;
  logic hcrhportstatus_4_ocic_wd;
  logic hcrhportstatus_4_ocic_we;
  logic hcrhportstatus_4_prsc_qs;
  logic hcrhportstatus_4_prsc_wd;
  logic hcrhportstatus_4_prsc_we;
  logic [10:0] hcrhportstatus_4_reservedupper_qs;
  logic hcrhportstatus_5_ccs_qs;
  logic hcrhportstatus_5_ccs_wd;
  logic hcrhportstatus_5_ccs_we;
  logic hcrhportstatus_5_pes_qs;
  logic hcrhportstatus_5_pes_wd;
  logic hcrhportstatus_5_pes_we;
  logic hcrhportstatus_5_pss_qs;
  logic hcrhportstatus_5_pss_wd;
  logic hcrhportstatus_5_pss_we;
  logic hcrhportstatus_5_poci_qs;
  logic hcrhportstatus_5_poci_wd;
  logic hcrhportstatus_5_poci_we;
  logic hcrhportstatus_5_prs_qs;
  logic hcrhportstatus_5_prs_wd;
  logic hcrhportstatus_5_prs_we;
  logic [2:0] hcrhportstatus_5_reservedlower_qs;
  logic hcrhportstatus_5_pps_qs;
  logic hcrhportstatus_5_pps_wd;
  logic hcrhportstatus_5_pps_we;
  logic hcrhportstatus_5_lsda_qs;
  logic hcrhportstatus_5_lsda_wd;
  logic hcrhportstatus_5_lsda_we;
  logic [5:0] hcrhportstatus_5_reservedmid_qs;
  logic hcrhportstatus_5_csc_qs;
  logic hcrhportstatus_5_csc_wd;
  logic hcrhportstatus_5_csc_we;
  logic hcrhportstatus_5_pesc_qs;
  logic hcrhportstatus_5_pesc_wd;
  logic hcrhportstatus_5_pesc_we;
  logic hcrhportstatus_5_pssc_qs;
  logic hcrhportstatus_5_pssc_wd;
  logic hcrhportstatus_5_pssc_we;
  logic hcrhportstatus_5_ocic_qs;
  logic hcrhportstatus_5_ocic_wd;
  logic hcrhportstatus_5_ocic_we;
  logic hcrhportstatus_5_prsc_qs;
  logic hcrhportstatus_5_prsc_wd;
  logic hcrhportstatus_5_prsc_we;
  logic [10:0] hcrhportstatus_5_reservedupper_qs;
  logic hcrhportstatus_6_ccs_qs;
  logic hcrhportstatus_6_ccs_wd;
  logic hcrhportstatus_6_ccs_we;
  logic hcrhportstatus_6_pes_qs;
  logic hcrhportstatus_6_pes_wd;
  logic hcrhportstatus_6_pes_we;
  logic hcrhportstatus_6_pss_qs;
  logic hcrhportstatus_6_pss_wd;
  logic hcrhportstatus_6_pss_we;
  logic hcrhportstatus_6_poci_qs;
  logic hcrhportstatus_6_poci_wd;
  logic hcrhportstatus_6_poci_we;
  logic hcrhportstatus_6_prs_qs;
  logic hcrhportstatus_6_prs_wd;
  logic hcrhportstatus_6_prs_we;
  logic [2:0] hcrhportstatus_6_reservedlower_qs;
  logic hcrhportstatus_6_pps_qs;
  logic hcrhportstatus_6_pps_wd;
  logic hcrhportstatus_6_pps_we;
  logic hcrhportstatus_6_lsda_qs;
  logic hcrhportstatus_6_lsda_wd;
  logic hcrhportstatus_6_lsda_we;
  logic [5:0] hcrhportstatus_6_reservedmid_qs;
  logic hcrhportstatus_6_csc_qs;
  logic hcrhportstatus_6_csc_wd;
  logic hcrhportstatus_6_csc_we;
  logic hcrhportstatus_6_pesc_qs;
  logic hcrhportstatus_6_pesc_wd;
  logic hcrhportstatus_6_pesc_we;
  logic hcrhportstatus_6_pssc_qs;
  logic hcrhportstatus_6_pssc_wd;
  logic hcrhportstatus_6_pssc_we;
  logic hcrhportstatus_6_ocic_qs;
  logic hcrhportstatus_6_ocic_wd;
  logic hcrhportstatus_6_ocic_we;
  logic hcrhportstatus_6_prsc_qs;
  logic hcrhportstatus_6_prsc_wd;
  logic hcrhportstatus_6_prsc_we;
  logic [10:0] hcrhportstatus_6_reservedupper_qs;
  logic hcrhportstatus_7_ccs_qs;
  logic hcrhportstatus_7_ccs_wd;
  logic hcrhportstatus_7_ccs_we;
  logic hcrhportstatus_7_pes_qs;
  logic hcrhportstatus_7_pes_wd;
  logic hcrhportstatus_7_pes_we;
  logic hcrhportstatus_7_pss_qs;
  logic hcrhportstatus_7_pss_wd;
  logic hcrhportstatus_7_pss_we;
  logic hcrhportstatus_7_poci_qs;
  logic hcrhportstatus_7_poci_wd;
  logic hcrhportstatus_7_poci_we;
  logic hcrhportstatus_7_prs_qs;
  logic hcrhportstatus_7_prs_wd;
  logic hcrhportstatus_7_prs_we;
  logic [2:0] hcrhportstatus_7_reservedlower_qs;
  logic hcrhportstatus_7_pps_qs;
  logic hcrhportstatus_7_pps_wd;
  logic hcrhportstatus_7_pps_we;
  logic hcrhportstatus_7_lsda_qs;
  logic hcrhportstatus_7_lsda_wd;
  logic hcrhportstatus_7_lsda_we;
  logic [5:0] hcrhportstatus_7_reservedmid_qs;
  logic hcrhportstatus_7_csc_qs;
  logic hcrhportstatus_7_csc_wd;
  logic hcrhportstatus_7_csc_we;
  logic hcrhportstatus_7_pesc_qs;
  logic hcrhportstatus_7_pesc_wd;
  logic hcrhportstatus_7_pesc_we;
  logic hcrhportstatus_7_pssc_qs;
  logic hcrhportstatus_7_pssc_wd;
  logic hcrhportstatus_7_pssc_we;
  logic hcrhportstatus_7_ocic_qs;
  logic hcrhportstatus_7_ocic_wd;
  logic hcrhportstatus_7_ocic_we;
  logic hcrhportstatus_7_prsc_qs;
  logic hcrhportstatus_7_prsc_wd;
  logic hcrhportstatus_7_prsc_we;
  logic [10:0] hcrhportstatus_7_reservedupper_qs;
  logic hcrhportstatus_8_ccs_qs;
  logic hcrhportstatus_8_ccs_wd;
  logic hcrhportstatus_8_ccs_we;
  logic hcrhportstatus_8_pes_qs;
  logic hcrhportstatus_8_pes_wd;
  logic hcrhportstatus_8_pes_we;
  logic hcrhportstatus_8_pss_qs;
  logic hcrhportstatus_8_pss_wd;
  logic hcrhportstatus_8_pss_we;
  logic hcrhportstatus_8_poci_qs;
  logic hcrhportstatus_8_poci_wd;
  logic hcrhportstatus_8_poci_we;
  logic hcrhportstatus_8_prs_qs;
  logic hcrhportstatus_8_prs_wd;
  logic hcrhportstatus_8_prs_we;
  logic [2:0] hcrhportstatus_8_reservedlower_qs;
  logic hcrhportstatus_8_pps_qs;
  logic hcrhportstatus_8_pps_wd;
  logic hcrhportstatus_8_pps_we;
  logic hcrhportstatus_8_lsda_qs;
  logic hcrhportstatus_8_lsda_wd;
  logic hcrhportstatus_8_lsda_we;
  logic [5:0] hcrhportstatus_8_reservedmid_qs;
  logic hcrhportstatus_8_csc_qs;
  logic hcrhportstatus_8_csc_wd;
  logic hcrhportstatus_8_csc_we;
  logic hcrhportstatus_8_pesc_qs;
  logic hcrhportstatus_8_pesc_wd;
  logic hcrhportstatus_8_pesc_we;
  logic hcrhportstatus_8_pssc_qs;
  logic hcrhportstatus_8_pssc_wd;
  logic hcrhportstatus_8_pssc_we;
  logic hcrhportstatus_8_ocic_qs;
  logic hcrhportstatus_8_ocic_wd;
  logic hcrhportstatus_8_ocic_we;
  logic hcrhportstatus_8_prsc_qs;
  logic hcrhportstatus_8_prsc_wd;
  logic hcrhportstatus_8_prsc_we;
  logic [10:0] hcrhportstatus_8_reservedupper_qs;

  // Register instances
  // R[hcrevision]: V(False)

  //   F[rev]: 7:0
  // constant-only read
  assign hcrevision_rev_qs = 8'h10;


  //   F[reserved]: 31:8
  // constant-only read
  assign hcrevision_reserved_qs = 24'h0;


  // R[hccontrol]: V(True)

  //   F[cbsr]: 1:0
  prim_subreg_ext #(
    .DW    (2)
  ) u_hccontrol_cbsr (
    .re     (hccontrol_cbsr_re),
    .we     (hccontrol_cbsr_we),
    .wd     (hccontrol_cbsr_wd),
    .d      (hw2reg.hccontrol.cbsr.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hccontrol.cbsr.q ),
    .qs     (hccontrol_cbsr_qs)
  );


  //   F[ple]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_hccontrol_ple (
    .re     (hccontrol_ple_re),
    .we     (hccontrol_ple_we),
    .wd     (hccontrol_ple_wd),
    .d      (hw2reg.hccontrol.ple.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hccontrol.ple.q ),
    .qs     (hccontrol_ple_qs)
  );


  //   F[ie]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_hccontrol_ie (
    .re     (hccontrol_ie_re),
    .we     (hccontrol_ie_we),
    .wd     (hccontrol_ie_wd),
    .d      (hw2reg.hccontrol.ie.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hccontrol.ie.q ),
    .qs     (hccontrol_ie_qs)
  );


  //   F[cle]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_hccontrol_cle (
    .re     (hccontrol_cle_re),
    .we     (hccontrol_cle_we),
    .wd     (hccontrol_cle_wd),
    .d      (hw2reg.hccontrol.cle.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hccontrol.cle.q ),
    .qs     (hccontrol_cle_qs)
  );


  //   F[ble]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_hccontrol_ble (
    .re     (hccontrol_ble_re),
    .we     (hccontrol_ble_we),
    .wd     (hccontrol_ble_wd),
    .d      (hw2reg.hccontrol.ble.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hccontrol.ble.q ),
    .qs     (hccontrol_ble_qs)
  );


  //   F[hcfs]: 7:6
  prim_subreg_ext #(
    .DW    (2)
  ) u_hccontrol_hcfs (
    .re     (hccontrol_hcfs_re),
    .we     (hccontrol_hcfs_we),
    .wd     (hccontrol_hcfs_wd),
    .d      (hw2reg.hccontrol.hcfs.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hccontrol.hcfs.q ),
    .qs     (hccontrol_hcfs_qs)
  );


  //   F[ir]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_hccontrol_ir (
    .re     (hccontrol_ir_re),
    .we     (hccontrol_ir_we),
    .wd     (hccontrol_ir_wd),
    .d      (hw2reg.hccontrol.ir.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hccontrol.ir.q ),
    .qs     (hccontrol_ir_qs)
  );


  //   F[rwc]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_hccontrol_rwc (
    .re     (hccontrol_rwc_re),
    .we     (hccontrol_rwc_we),
    .wd     (hccontrol_rwc_wd),
    .d      (hw2reg.hccontrol.rwc.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hccontrol.rwc.q ),
    .qs     (hccontrol_rwc_qs)
  );


  //   F[rwe]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_hccontrol_rwe (
    .re     (hccontrol_rwe_re),
    .we     (hccontrol_rwe_we),
    .wd     (hccontrol_rwe_wd),
    .d      (hw2reg.hccontrol.rwe.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hccontrol.rwe.q ),
    .qs     (hccontrol_rwe_qs)
  );


  //   F[reserved]: 31:11
  prim_subreg_ext #(
    .DW    (21)
  ) u_hccontrol_reserved (
    .re     (hccontrol_reserved_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.hccontrol.reserved.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (hccontrol_reserved_qs)
  );


  // R[hccommandstatus]: V(True)

  //   F[hcr]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_hccommandstatus_hcr (
    .re     (hccommandstatus_hcr_re),
    .we     (hccommandstatus_hcr_we),
    .wd     (hccommandstatus_hcr_wd),
    .d      (hw2reg.hccommandstatus.hcr.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hccommandstatus.hcr.q ),
    .qs     (hccommandstatus_hcr_qs)
  );


  //   F[clf]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_hccommandstatus_clf (
    .re     (hccommandstatus_clf_re),
    .we     (hccommandstatus_clf_we),
    .wd     (hccommandstatus_clf_wd),
    .d      (hw2reg.hccommandstatus.clf.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hccommandstatus.clf.q ),
    .qs     (hccommandstatus_clf_qs)
  );


  //   F[blf]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_hccommandstatus_blf (
    .re     (hccommandstatus_blf_re),
    .we     (hccommandstatus_blf_we),
    .wd     (hccommandstatus_blf_wd),
    .d      (hw2reg.hccommandstatus.blf.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hccommandstatus.blf.q ),
    .qs     (hccommandstatus_blf_qs)
  );


  //   F[ocr]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_hccommandstatus_ocr (
    .re     (hccommandstatus_ocr_re),
    .we     (hccommandstatus_ocr_we),
    .wd     (hccommandstatus_ocr_wd),
    .d      (hw2reg.hccommandstatus.ocr.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hccommandstatus.ocr.q ),
    .qs     (hccommandstatus_ocr_qs)
  );


  //   F[reservedlower]: 15:4
  prim_subreg_ext #(
    .DW    (12)
  ) u_hccommandstatus_reservedlower (
    .re     (hccommandstatus_reservedlower_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.hccommandstatus.reservedlower.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (hccommandstatus_reservedlower_qs)
  );


  //   F[soc]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_hccommandstatus_soc (
    .re     (hccommandstatus_soc_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.hccommandstatus.soc.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (hccommandstatus_soc_qs)
  );


  //   F[reservedupper]: 31:18
  prim_subreg_ext #(
    .DW    (14)
  ) u_hccommandstatus_reservedupper (
    .re     (hccommandstatus_reservedupper_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.hccommandstatus.reservedupper.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (hccommandstatus_reservedupper_qs)
  );


  // R[hcinterruptstatus]: V(True)

  //   F[so]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptstatus_so (
    .re     (hcinterruptstatus_so_re),
    .we     (hcinterruptstatus_so_we),
    .wd     (hcinterruptstatus_so_wd),
    .d      (hw2reg.hcinterruptstatus.so.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptstatus.so.q ),
    .qs     (hcinterruptstatus_so_qs)
  );


  //   F[wdh]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptstatus_wdh (
    .re     (hcinterruptstatus_wdh_re),
    .we     (hcinterruptstatus_wdh_we),
    .wd     (hcinterruptstatus_wdh_wd),
    .d      (hw2reg.hcinterruptstatus.wdh.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptstatus.wdh.q ),
    .qs     (hcinterruptstatus_wdh_qs)
  );


  //   F[sf]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptstatus_sf (
    .re     (hcinterruptstatus_sf_re),
    .we     (hcinterruptstatus_sf_we),
    .wd     (hcinterruptstatus_sf_wd),
    .d      (hw2reg.hcinterruptstatus.sf.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptstatus.sf.q ),
    .qs     (hcinterruptstatus_sf_qs)
  );


  //   F[rd]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptstatus_rd (
    .re     (hcinterruptstatus_rd_re),
    .we     (hcinterruptstatus_rd_we),
    .wd     (hcinterruptstatus_rd_wd),
    .d      (hw2reg.hcinterruptstatus.rd.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptstatus.rd.q ),
    .qs     (hcinterruptstatus_rd_qs)
  );


  //   F[ue]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptstatus_ue (
    .re     (hcinterruptstatus_ue_re),
    .we     (hcinterruptstatus_ue_we),
    .wd     (hcinterruptstatus_ue_wd),
    .d      (hw2reg.hcinterruptstatus.ue.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptstatus.ue.q ),
    .qs     (hcinterruptstatus_ue_qs)
  );


  //   F[fno]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptstatus_fno (
    .re     (hcinterruptstatus_fno_re),
    .we     (hcinterruptstatus_fno_we),
    .wd     (hcinterruptstatus_fno_wd),
    .d      (hw2reg.hcinterruptstatus.fno.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptstatus.fno.q ),
    .qs     (hcinterruptstatus_fno_qs)
  );


  //   F[rhsc]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptstatus_rhsc (
    .re     (hcinterruptstatus_rhsc_re),
    .we     (hcinterruptstatus_rhsc_we),
    .wd     (hcinterruptstatus_rhsc_wd),
    .d      (hw2reg.hcinterruptstatus.rhsc.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptstatus.rhsc.q ),
    .qs     (hcinterruptstatus_rhsc_qs)
  );


  //   F[reservedlower]: 29:7
  prim_subreg_ext #(
    .DW    (23)
  ) u_hcinterruptstatus_reservedlower (
    .re     (hcinterruptstatus_reservedlower_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.hcinterruptstatus.reservedlower.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (hcinterruptstatus_reservedlower_qs)
  );


  //   F[oc]: 30:30
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptstatus_oc (
    .re     (hcinterruptstatus_oc_re),
    .we     (hcinterruptstatus_oc_we),
    .wd     (hcinterruptstatus_oc_wd),
    .d      (hw2reg.hcinterruptstatus.oc.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptstatus.oc.q ),
    .qs     (hcinterruptstatus_oc_qs)
  );


  //   F[reservedupper]: 31:31
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptstatus_reservedupper (
    .re     (hcinterruptstatus_reservedupper_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.hcinterruptstatus.reservedupper.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (hcinterruptstatus_reservedupper_qs)
  );


  // R[hcinterruptenable]: V(True)

  //   F[so]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptenable_so (
    .re     (hcinterruptenable_so_re),
    .we     (hcinterruptenable_so_we),
    .wd     (hcinterruptenable_so_wd),
    .d      (hw2reg.hcinterruptenable.so.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptenable.so.q ),
    .qs     (hcinterruptenable_so_qs)
  );


  //   F[wdh]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptenable_wdh (
    .re     (hcinterruptenable_wdh_re),
    .we     (hcinterruptenable_wdh_we),
    .wd     (hcinterruptenable_wdh_wd),
    .d      (hw2reg.hcinterruptenable.wdh.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptenable.wdh.q ),
    .qs     (hcinterruptenable_wdh_qs)
  );


  //   F[sf]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptenable_sf (
    .re     (hcinterruptenable_sf_re),
    .we     (hcinterruptenable_sf_we),
    .wd     (hcinterruptenable_sf_wd),
    .d      (hw2reg.hcinterruptenable.sf.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptenable.sf.q ),
    .qs     (hcinterruptenable_sf_qs)
  );


  //   F[rd]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptenable_rd (
    .re     (hcinterruptenable_rd_re),
    .we     (hcinterruptenable_rd_we),
    .wd     (hcinterruptenable_rd_wd),
    .d      (hw2reg.hcinterruptenable.rd.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptenable.rd.q ),
    .qs     (hcinterruptenable_rd_qs)
  );


  //   F[ue]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptenable_ue (
    .re     (hcinterruptenable_ue_re),
    .we     (hcinterruptenable_ue_we),
    .wd     (hcinterruptenable_ue_wd),
    .d      (hw2reg.hcinterruptenable.ue.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptenable.ue.q ),
    .qs     (hcinterruptenable_ue_qs)
  );


  //   F[fno]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptenable_fno (
    .re     (hcinterruptenable_fno_re),
    .we     (hcinterruptenable_fno_we),
    .wd     (hcinterruptenable_fno_wd),
    .d      (hw2reg.hcinterruptenable.fno.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptenable.fno.q ),
    .qs     (hcinterruptenable_fno_qs)
  );


  //   F[rhcs]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptenable_rhcs (
    .re     (hcinterruptenable_rhcs_re),
    .we     (hcinterruptenable_rhcs_we),
    .wd     (hcinterruptenable_rhcs_wd),
    .d      (hw2reg.hcinterruptenable.rhcs.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptenable.rhcs.q ),
    .qs     (hcinterruptenable_rhcs_qs)
  );


  //   F[reserved]: 29:7
  prim_subreg_ext #(
    .DW    (23)
  ) u_hcinterruptenable_reserved (
    .re     (hcinterruptenable_reserved_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.hcinterruptenable.reserved.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (hcinterruptenable_reserved_qs)
  );


  //   F[oc]: 30:30
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptenable_oc (
    .re     (hcinterruptenable_oc_re),
    .we     (hcinterruptenable_oc_we),
    .wd     (hcinterruptenable_oc_wd),
    .d      (hw2reg.hcinterruptenable.oc.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptenable.oc.q ),
    .qs     (hcinterruptenable_oc_qs)
  );


  //   F[mie]: 31:31
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptenable_mie (
    .re     (hcinterruptenable_mie_re),
    .we     (hcinterruptenable_mie_we),
    .wd     (hcinterruptenable_mie_wd),
    .d      (hw2reg.hcinterruptenable.mie.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptenable.mie.q ),
    .qs     (hcinterruptenable_mie_qs)
  );


  // R[hcinterruptdisable]: V(True)

  //   F[so]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptdisable_so (
    .re     (hcinterruptdisable_so_re),
    .we     (hcinterruptdisable_so_we),
    .wd     (hcinterruptdisable_so_wd),
    .d      (hw2reg.hcinterruptdisable.so.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptdisable.so.q ),
    .qs     (hcinterruptdisable_so_qs)
  );


  //   F[wdh]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptdisable_wdh (
    .re     (hcinterruptdisable_wdh_re),
    .we     (hcinterruptdisable_wdh_we),
    .wd     (hcinterruptdisable_wdh_wd),
    .d      (hw2reg.hcinterruptdisable.wdh.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptdisable.wdh.q ),
    .qs     (hcinterruptdisable_wdh_qs)
  );


  //   F[sf]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptdisable_sf (
    .re     (hcinterruptdisable_sf_re),
    .we     (hcinterruptdisable_sf_we),
    .wd     (hcinterruptdisable_sf_wd),
    .d      (hw2reg.hcinterruptdisable.sf.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptdisable.sf.q ),
    .qs     (hcinterruptdisable_sf_qs)
  );


  //   F[rd]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptdisable_rd (
    .re     (hcinterruptdisable_rd_re),
    .we     (hcinterruptdisable_rd_we),
    .wd     (hcinterruptdisable_rd_wd),
    .d      (hw2reg.hcinterruptdisable.rd.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptdisable.rd.q ),
    .qs     (hcinterruptdisable_rd_qs)
  );


  //   F[ue]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptdisable_ue (
    .re     (hcinterruptdisable_ue_re),
    .we     (hcinterruptdisable_ue_we),
    .wd     (hcinterruptdisable_ue_wd),
    .d      (hw2reg.hcinterruptdisable.ue.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptdisable.ue.q ),
    .qs     (hcinterruptdisable_ue_qs)
  );


  //   F[fno]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptdisable_fno (
    .re     (hcinterruptdisable_fno_re),
    .we     (hcinterruptdisable_fno_we),
    .wd     (hcinterruptdisable_fno_wd),
    .d      (hw2reg.hcinterruptdisable.fno.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptdisable.fno.q ),
    .qs     (hcinterruptdisable_fno_qs)
  );


  //   F[rhcs]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptdisable_rhcs (
    .re     (hcinterruptdisable_rhcs_re),
    .we     (hcinterruptdisable_rhcs_we),
    .wd     (hcinterruptdisable_rhcs_wd),
    .d      (hw2reg.hcinterruptdisable.rhcs.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptdisable.rhcs.q ),
    .qs     (hcinterruptdisable_rhcs_qs)
  );


  //   F[reserved]: 29:7
  prim_subreg_ext #(
    .DW    (23)
  ) u_hcinterruptdisable_reserved (
    .re     (hcinterruptdisable_reserved_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.hcinterruptdisable.reserved.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (hcinterruptdisable_reserved_qs)
  );


  //   F[oc]: 30:30
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptdisable_oc (
    .re     (hcinterruptdisable_oc_re),
    .we     (hcinterruptdisable_oc_we),
    .wd     (hcinterruptdisable_oc_wd),
    .d      (hw2reg.hcinterruptdisable.oc.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptdisable.oc.q ),
    .qs     (hcinterruptdisable_oc_qs)
  );


  //   F[mie]: 31:31
  prim_subreg_ext #(
    .DW    (1)
  ) u_hcinterruptdisable_mie (
    .re     (hcinterruptdisable_mie_re),
    .we     (hcinterruptdisable_mie_we),
    .wd     (hcinterruptdisable_mie_wd),
    .d      (hw2reg.hcinterruptdisable.mie.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hcinterruptdisable.mie.q ),
    .qs     (hcinterruptdisable_mie_qs)
  );


  // R[hchcaa]: V(True)

  //   F[zero]: 7:0
  prim_subreg_ext #(
    .DW    (8)
  ) u_hchcaa_zero (
    .re     (hchcaa_zero_re),
    .we     (hchcaa_zero_we),
    .wd     (hchcaa_zero_wd),
    .d      (hw2reg.hchcaa.zero.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hchcaa.zero.q ),
    .qs     (hchcaa_zero_qs)
  );


  //   F[hcca]: 31:8
  prim_subreg_ext #(
    .DW    (24)
  ) u_hchcaa_hcca (
    .re     (hchcaa_hcca_re),
    .we     (hchcaa_hcca_we),
    .wd     (hchcaa_hcca_wd),
    .d      (hw2reg.hchcaa.hcca.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hchcaa.hcca.q ),
    .qs     (hchcaa_hcca_qs)
  );


  // R[hcperiodcurrented]: V(False)

  //   F[zero]: 3:0
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RO"),
    .RESVAL  (4'h0)
  ) u_hcperiodcurrented_zero (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcperiodcurrented.zero.de),
    .d      (hw2reg.hcperiodcurrented.zero.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcperiodcurrented.zero.q ),

    // to register interface (read)
    .qs     (hcperiodcurrented_zero_qs)
  );


  //   F[pced]: 31:4
  prim_subreg #(
    .DW      (28),
    .SWACCESS("RO"),
    .RESVAL  (28'h0)
  ) u_hcperiodcurrented_pced (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcperiodcurrented.pced.de),
    .d      (hw2reg.hcperiodcurrented.pced.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcperiodcurrented.pced.q ),

    // to register interface (read)
    .qs     (hcperiodcurrented_pced_qs)
  );


  // R[hccontrolheaded]: V(False)

  //   F[zero]: 3:0
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_hccontrolheaded_zero (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hccontrolheaded_zero_we),
    .wd     (hccontrolheaded_zero_wd),

    // from internal hardware
    .de     (hw2reg.hccontrolheaded.zero.de),
    .d      (hw2reg.hccontrolheaded.zero.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hccontrolheaded.zero.q ),

    // to register interface (read)
    .qs     (hccontrolheaded_zero_qs)
  );


  //   F[ched]: 31:4
  prim_subreg #(
    .DW      (28),
    .SWACCESS("RW"),
    .RESVAL  (28'h0)
  ) u_hccontrolheaded_ched (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hccontrolheaded_ched_we),
    .wd     (hccontrolheaded_ched_wd),

    // from internal hardware
    .de     (hw2reg.hccontrolheaded.ched.de),
    .d      (hw2reg.hccontrolheaded.ched.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hccontrolheaded.ched.q ),

    // to register interface (read)
    .qs     (hccontrolheaded_ched_qs)
  );


  // R[hccontrolcurrented]: V(False)

  //   F[zero]: 3:0
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_hccontrolcurrented_zero (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hccontrolcurrented_zero_we),
    .wd     (hccontrolcurrented_zero_wd),

    // from internal hardware
    .de     (hw2reg.hccontrolcurrented.zero.de),
    .d      (hw2reg.hccontrolcurrented.zero.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hccontrolcurrented.zero.q ),

    // to register interface (read)
    .qs     (hccontrolcurrented_zero_qs)
  );


  //   F[cced]: 31:4
  prim_subreg #(
    .DW      (28),
    .SWACCESS("RW"),
    .RESVAL  (28'h0)
  ) u_hccontrolcurrented_cced (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hccontrolcurrented_cced_we),
    .wd     (hccontrolcurrented_cced_wd),

    // from internal hardware
    .de     (hw2reg.hccontrolcurrented.cced.de),
    .d      (hw2reg.hccontrolcurrented.cced.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hccontrolcurrented.cced.q ),

    // to register interface (read)
    .qs     (hccontrolcurrented_cced_qs)
  );


  // R[hcbulkheaded]: V(False)

  //   F[zero]: 3:0
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_hcbulkheaded_zero (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcbulkheaded_zero_we),
    .wd     (hcbulkheaded_zero_wd),

    // from internal hardware
    .de     (hw2reg.hcbulkheaded.zero.de),
    .d      (hw2reg.hcbulkheaded.zero.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcbulkheaded.zero.q ),

    // to register interface (read)
    .qs     (hcbulkheaded_zero_qs)
  );


  //   F[bhed]: 31:4
  prim_subreg #(
    .DW      (28),
    .SWACCESS("RW"),
    .RESVAL  (28'h0)
  ) u_hcbulkheaded_bhed (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcbulkheaded_bhed_we),
    .wd     (hcbulkheaded_bhed_wd),

    // from internal hardware
    .de     (hw2reg.hcbulkheaded.bhed.de),
    .d      (hw2reg.hcbulkheaded.bhed.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcbulkheaded.bhed.q ),

    // to register interface (read)
    .qs     (hcbulkheaded_bhed_qs)
  );


  // R[hcbulkcurrented]: V(False)

  //   F[zero]: 3:0
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_hcbulkcurrented_zero (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcbulkcurrented_zero_we),
    .wd     (hcbulkcurrented_zero_wd),

    // from internal hardware
    .de     (hw2reg.hcbulkcurrented.zero.de),
    .d      (hw2reg.hcbulkcurrented.zero.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcbulkcurrented.zero.q ),

    // to register interface (read)
    .qs     (hcbulkcurrented_zero_qs)
  );


  //   F[bced]: 31:4
  prim_subreg #(
    .DW      (28),
    .SWACCESS("RW"),
    .RESVAL  (28'h0)
  ) u_hcbulkcurrented_bced (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcbulkcurrented_bced_we),
    .wd     (hcbulkcurrented_bced_wd),

    // from internal hardware
    .de     (hw2reg.hcbulkcurrented.bced.de),
    .d      (hw2reg.hcbulkcurrented.bced.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcbulkcurrented.bced.q ),

    // to register interface (read)
    .qs     (hcbulkcurrented_bced_qs)
  );


  // R[hcdonehead]: V(False)

  //   F[zero]: 3:0
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RO"),
    .RESVAL  (4'h0)
  ) u_hcdonehead_zero (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcdonehead.zero.de),
    .d      (hw2reg.hcdonehead.zero.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcdonehead.zero.q ),

    // to register interface (read)
    .qs     (hcdonehead_zero_qs)
  );


  //   F[dh]: 31:4
  prim_subreg #(
    .DW      (28),
    .SWACCESS("RO"),
    .RESVAL  (28'h0)
  ) u_hcdonehead_dh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcdonehead.dh.de),
    .d      (hw2reg.hcdonehead.dh.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcdonehead.dh.q ),

    // to register interface (read)
    .qs     (hcdonehead_dh_qs)
  );


  // R[hcfminterval]: V(False)

  //   F[fi]: 13:0
  prim_subreg #(
    .DW      (14),
    .SWACCESS("RW"),
    .RESVAL  (14'h2edf)
  ) u_hcfminterval_fi (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcfminterval_fi_we),
    .wd     (hcfminterval_fi_wd),

    // from internal hardware
    .de     (hw2reg.hcfminterval.fi.de),
    .d      (hw2reg.hcfminterval.fi.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcfminterval.fi.q ),

    // to register interface (read)
    .qs     (hcfminterval_fi_qs)
  );


  //   F[reserved]: 15:14
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RO"),
    .RESVAL  (2'h0)
  ) u_hcfminterval_reserved (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcfminterval.reserved.de),
    .d      (hw2reg.hcfminterval.reserved.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcfminterval.reserved.q ),

    // to register interface (read)
    .qs     (hcfminterval_reserved_qs)
  );


  //   F[fsmps]: 30:16
  prim_subreg #(
    .DW      (15),
    .SWACCESS("RW"),
    .RESVAL  (15'h0)
  ) u_hcfminterval_fsmps (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcfminterval_fsmps_we),
    .wd     (hcfminterval_fsmps_wd),

    // from internal hardware
    .de     (hw2reg.hcfminterval.fsmps.de),
    .d      (hw2reg.hcfminterval.fsmps.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcfminterval.fsmps.q ),

    // to register interface (read)
    .qs     (hcfminterval_fsmps_qs)
  );


  //   F[fit]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcfminterval_fit (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcfminterval_fit_we),
    .wd     (hcfminterval_fit_wd),

    // from internal hardware
    .de     (hw2reg.hcfminterval.fit.de),
    .d      (hw2reg.hcfminterval.fit.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcfminterval.fit.q ),

    // to register interface (read)
    .qs     (hcfminterval_fit_qs)
  );


  // R[hcfmremaining]: V(False)

  //   F[fr]: 13:0
  prim_subreg #(
    .DW      (14),
    .SWACCESS("RO"),
    .RESVAL  (14'h0)
  ) u_hcfmremaining_fr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcfmremaining.fr.de),
    .d      (hw2reg.hcfmremaining.fr.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcfmremaining.fr.q ),

    // to register interface (read)
    .qs     (hcfmremaining_fr_qs)
  );


  //   F[reserved]: 30:14
  prim_subreg #(
    .DW      (17),
    .SWACCESS("RO"),
    .RESVAL  (17'h0)
  ) u_hcfmremaining_reserved (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcfmremaining.reserved.de),
    .d      (hw2reg.hcfmremaining.reserved.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcfmremaining.reserved.q ),

    // to register interface (read)
    .qs     (hcfmremaining_reserved_qs)
  );


  //   F[frt]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_hcfmremaining_frt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcfmremaining.frt.de),
    .d      (hw2reg.hcfmremaining.frt.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcfmremaining.frt.q ),

    // to register interface (read)
    .qs     (hcfmremaining_frt_qs)
  );


  // R[hcfmnumber]: V(False)

  //   F[fn]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RO"),
    .RESVAL  (16'h0)
  ) u_hcfmnumber_fn (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcfmnumber.fn.de),
    .d      (hw2reg.hcfmnumber.fn.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcfmnumber.fn.q ),

    // to register interface (read)
    .qs     (hcfmnumber_fn_qs)
  );


  //   F[reserved]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RO"),
    .RESVAL  (16'h0)
  ) u_hcfmnumber_reserved (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcfmnumber.reserved.de),
    .d      (hw2reg.hcfmnumber.reserved.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcfmnumber.reserved.q ),

    // to register interface (read)
    .qs     (hcfmnumber_reserved_qs)
  );


  // R[hcperiodicstart]: V(False)

  //   F[ps]: 13:0
  prim_subreg #(
    .DW      (14),
    .SWACCESS("RW"),
    .RESVAL  (14'h0)
  ) u_hcperiodicstart_ps (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcperiodicstart_ps_we),
    .wd     (hcperiodicstart_ps_wd),

    // from internal hardware
    .de     (hw2reg.hcperiodicstart.ps.de),
    .d      (hw2reg.hcperiodicstart.ps.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcperiodicstart.ps.q ),

    // to register interface (read)
    .qs     (hcperiodicstart_ps_qs)
  );


  //   F[reserved]: 31:14
  prim_subreg #(
    .DW      (18),
    .SWACCESS("RO"),
    .RESVAL  (18'h0)
  ) u_hcperiodicstart_reserved (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcperiodicstart.reserved.de),
    .d      (hw2reg.hcperiodicstart.reserved.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcperiodicstart.reserved.q ),

    // to register interface (read)
    .qs     (hcperiodicstart_reserved_qs)
  );


  // R[hclsthreshold]: V(False)

  //   F[lst]: 11:0
  prim_subreg #(
    .DW      (12),
    .SWACCESS("RW"),
    .RESVAL  (12'h628)
  ) u_hclsthreshold_lst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hclsthreshold_lst_we),
    .wd     (hclsthreshold_lst_wd),

    // from internal hardware
    .de     (hw2reg.hclsthreshold.lst.de),
    .d      (hw2reg.hclsthreshold.lst.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hclsthreshold.lst.q ),

    // to register interface (read)
    .qs     (hclsthreshold_lst_qs)
  );


  //   F[reserved]: 31:12
  prim_subreg #(
    .DW      (20),
    .SWACCESS("RO"),
    .RESVAL  (20'h0)
  ) u_hclsthreshold_reserved (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hclsthreshold.reserved.de),
    .d      (hw2reg.hclsthreshold.reserved.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hclsthreshold.reserved.q ),

    // to register interface (read)
    .qs     (hclsthreshold_reserved_qs)
  );


  // R[hcrhdescriptora]: V(False)

  //   F[ndp]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RO"),
    .RESVAL  (8'h8)
  ) u_hcrhdescriptora_ndp (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhdescriptora.ndp.de),
    .d      (hw2reg.hcrhdescriptora.ndp.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhdescriptora.ndp.q ),

    // to register interface (read)
    .qs     (hcrhdescriptora_ndp_qs)
  );


  //   F[nps]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_hcrhdescriptora_nps (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhdescriptora_nps_we),
    .wd     (hcrhdescriptora_nps_wd),

    // from internal hardware
    .de     (hw2reg.hcrhdescriptora.nps.de),
    .d      (hw2reg.hcrhdescriptora.nps.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhdescriptora.nps.q ),

    // to register interface (read)
    .qs     (hcrhdescriptora_nps_qs)
  );


  //   F[psm]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhdescriptora_psm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhdescriptora_psm_we),
    .wd     (hcrhdescriptora_psm_wd),

    // from internal hardware
    .de     (hw2reg.hcrhdescriptora.psm.de),
    .d      (hw2reg.hcrhdescriptora.psm.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhdescriptora.psm.q ),

    // to register interface (read)
    .qs     (hcrhdescriptora_psm_qs)
  );


  //   F[dt]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_hcrhdescriptora_dt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhdescriptora.dt.de),
    .d      (hw2reg.hcrhdescriptora.dt.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhdescriptora.dt.q ),

    // to register interface (read)
    .qs     (hcrhdescriptora_dt_qs)
  );


  //   F[ocpm]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhdescriptora_ocpm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhdescriptora_ocpm_we),
    .wd     (hcrhdescriptora_ocpm_wd),

    // from internal hardware
    .de     (hw2reg.hcrhdescriptora.ocpm.de),
    .d      (hw2reg.hcrhdescriptora.ocpm.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhdescriptora.ocpm.q ),

    // to register interface (read)
    .qs     (hcrhdescriptora_ocpm_qs)
  );


  //   F[nocp]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_hcrhdescriptora_nocp (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhdescriptora_nocp_we),
    .wd     (hcrhdescriptora_nocp_wd),

    // from internal hardware
    .de     (hw2reg.hcrhdescriptora.nocp.de),
    .d      (hw2reg.hcrhdescriptora.nocp.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhdescriptora.nocp.q ),

    // to register interface (read)
    .qs     (hcrhdescriptora_nocp_qs)
  );


  //   F[reserved]: 23:13
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RO"),
    .RESVAL  (11'h0)
  ) u_hcrhdescriptora_reserved (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhdescriptora.reserved.de),
    .d      (hw2reg.hcrhdescriptora.reserved.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhdescriptora.reserved.q ),

    // to register interface (read)
    .qs     (hcrhdescriptora_reserved_qs)
  );


  //   F[potpgt]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'ha)
  ) u_hcrhdescriptora_potpgt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhdescriptora_potpgt_we),
    .wd     (hcrhdescriptora_potpgt_wd),

    // from internal hardware
    .de     (hw2reg.hcrhdescriptora.potpgt.de),
    .d      (hw2reg.hcrhdescriptora.potpgt.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhdescriptora.potpgt.q ),

    // to register interface (read)
    .qs     (hcrhdescriptora_potpgt_qs)
  );


  // R[hcrhdescriptorb]: V(False)

  //   F[dr]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_hcrhdescriptorb_dr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhdescriptorb_dr_we),
    .wd     (hcrhdescriptorb_dr_wd),

    // from internal hardware
    .de     (hw2reg.hcrhdescriptorb.dr.de),
    .d      (hw2reg.hcrhdescriptorb.dr.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhdescriptorb.dr.q ),

    // to register interface (read)
    .qs     (hcrhdescriptorb_dr_qs)
  );


  //   F[ppcm]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_hcrhdescriptorb_ppcm (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhdescriptorb_ppcm_we),
    .wd     (hcrhdescriptorb_ppcm_wd),

    // from internal hardware
    .de     (hw2reg.hcrhdescriptorb.ppcm.de),
    .d      (hw2reg.hcrhdescriptorb.ppcm.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhdescriptorb.ppcm.q ),

    // to register interface (read)
    .qs     (hcrhdescriptorb_ppcm_qs)
  );


  // R[hcrhstatus]: V(False)

  //   F[lps]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhstatus_lps (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhstatus_lps_we),
    .wd     (hcrhstatus_lps_wd),

    // from internal hardware
    .de     (hw2reg.hcrhstatus.lps.de),
    .d      (hw2reg.hcrhstatus.lps.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhstatus.lps.q ),

    // to register interface (read)
    .qs     (hcrhstatus_lps_qs)
  );


  //   F[oci]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_hcrhstatus_oci (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhstatus.oci.de),
    .d      (hw2reg.hcrhstatus.oci.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhstatus.oci.q ),

    // to register interface (read)
    .qs     (hcrhstatus_oci_qs)
  );


  //   F[reservedlower]: 14:2
  prim_subreg #(
    .DW      (13),
    .SWACCESS("RO"),
    .RESVAL  (13'h0)
  ) u_hcrhstatus_reservedlower (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhstatus.reservedlower.de),
    .d      (hw2reg.hcrhstatus.reservedlower.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhstatus.reservedlower.q ),

    // to register interface (read)
    .qs     (hcrhstatus_reservedlower_qs)
  );


  //   F[drwe]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhstatus_drwe (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhstatus_drwe_we),
    .wd     (hcrhstatus_drwe_wd),

    // from internal hardware
    .de     (hw2reg.hcrhstatus.drwe.de),
    .d      (hw2reg.hcrhstatus.drwe.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhstatus.drwe.q ),

    // to register interface (read)
    .qs     (hcrhstatus_drwe_qs)
  );


  //   F[lpsc]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhstatus_lpsc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhstatus_lpsc_we),
    .wd     (hcrhstatus_lpsc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhstatus.lpsc.de),
    .d      (hw2reg.hcrhstatus.lpsc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhstatus.lpsc.q ),

    // to register interface (read)
    .qs     (hcrhstatus_lpsc_qs)
  );


  //   F[ocic]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhstatus_ocic (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhstatus_ocic_we),
    .wd     (hcrhstatus_ocic_wd),

    // from internal hardware
    .de     (hw2reg.hcrhstatus.ocic.de),
    .d      (hw2reg.hcrhstatus.ocic.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhstatus.ocic.q ),

    // to register interface (read)
    .qs     (hcrhstatus_ocic_qs)
  );


  //   F[reservedupper]: 30:18
  prim_subreg #(
    .DW      (13),
    .SWACCESS("RO"),
    .RESVAL  (13'h0)
  ) u_hcrhstatus_reservedupper (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhstatus.reservedupper.de),
    .d      (hw2reg.hcrhstatus.reservedupper.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhstatus.reservedupper.q ),

    // to register interface (read)
    .qs     (hcrhstatus_reservedupper_qs)
  );


  //   F[crwe]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_hcrhstatus_crwe (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhstatus_crwe_we),
    .wd     (hcrhstatus_crwe_wd),

    // from internal hardware
    .de     (hw2reg.hcrhstatus.crwe.de),
    .d      (hw2reg.hcrhstatus.crwe.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhstatus.crwe.q ),

    .qs     ()
  );


  // R[hcrhportstatus_1]: V(False)

  //   F[ccs]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_1_ccs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_1_ccs_we),
    .wd     (hcrhportstatus_1_ccs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.ccs.de),
    .d      (hw2reg.hcrhportstatus_1.ccs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.ccs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_ccs_qs)
  );


  //   F[pes]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_1_pes (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_1_pes_we),
    .wd     (hcrhportstatus_1_pes_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.pes.de),
    .d      (hw2reg.hcrhportstatus_1.pes.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.pes.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_pes_qs)
  );


  //   F[pss]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_1_pss (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_1_pss_we),
    .wd     (hcrhportstatus_1_pss_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.pss.de),
    .d      (hw2reg.hcrhportstatus_1.pss.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.pss.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_pss_qs)
  );


  //   F[poci]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_1_poci (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_1_poci_we),
    .wd     (hcrhportstatus_1_poci_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.poci.de),
    .d      (hw2reg.hcrhportstatus_1.poci.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.poci.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_poci_qs)
  );


  //   F[prs]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_1_prs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_1_prs_we),
    .wd     (hcrhportstatus_1_prs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.prs.de),
    .d      (hw2reg.hcrhportstatus_1.prs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.prs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_prs_qs)
  );


  //   F[reservedlower]: 7:5
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RO"),
    .RESVAL  (3'h0)
  ) u_hcrhportstatus_1_reservedlower (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.reservedlower.de),
    .d      (hw2reg.hcrhportstatus_1.reservedlower.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.reservedlower.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_reservedlower_qs)
  );


  //   F[pps]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_1_pps (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_1_pps_we),
    .wd     (hcrhportstatus_1_pps_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.pps.de),
    .d      (hw2reg.hcrhportstatus_1.pps.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.pps.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_pps_qs)
  );


  //   F[lsda]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_1_lsda (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_1_lsda_we),
    .wd     (hcrhportstatus_1_lsda_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.lsda.de),
    .d      (hw2reg.hcrhportstatus_1.lsda.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.lsda.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_lsda_qs)
  );


  //   F[reservedmid]: 15:10
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RO"),
    .RESVAL  (6'h0)
  ) u_hcrhportstatus_1_reservedmid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.reservedmid.de),
    .d      (hw2reg.hcrhportstatus_1.reservedmid.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.reservedmid.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_reservedmid_qs)
  );


  //   F[csc]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_1_csc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_1_csc_we),
    .wd     (hcrhportstatus_1_csc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.csc.de),
    .d      (hw2reg.hcrhportstatus_1.csc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.csc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_csc_qs)
  );


  //   F[pesc]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_1_pesc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_1_pesc_we),
    .wd     (hcrhportstatus_1_pesc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.pesc.de),
    .d      (hw2reg.hcrhportstatus_1.pesc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.pesc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_pesc_qs)
  );


  //   F[pssc]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_1_pssc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_1_pssc_we),
    .wd     (hcrhportstatus_1_pssc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.pssc.de),
    .d      (hw2reg.hcrhportstatus_1.pssc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.pssc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_pssc_qs)
  );


  //   F[ocic]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_1_ocic (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_1_ocic_we),
    .wd     (hcrhportstatus_1_ocic_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.ocic.de),
    .d      (hw2reg.hcrhportstatus_1.ocic.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.ocic.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_ocic_qs)
  );


  //   F[prsc]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_1_prsc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_1_prsc_we),
    .wd     (hcrhportstatus_1_prsc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.prsc.de),
    .d      (hw2reg.hcrhportstatus_1.prsc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.prsc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_prsc_qs)
  );


  //   F[reservedupper]: 31:21
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RO"),
    .RESVAL  (11'h0)
  ) u_hcrhportstatus_1_reservedupper (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_1.reservedupper.de),
    .d      (hw2reg.hcrhportstatus_1.reservedupper.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_1.reservedupper.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_1_reservedupper_qs)
  );


  // R[hcrhportstatus_2]: V(False)

  //   F[ccs]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_2_ccs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_2_ccs_we),
    .wd     (hcrhportstatus_2_ccs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.ccs.de),
    .d      (hw2reg.hcrhportstatus_2.ccs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.ccs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_ccs_qs)
  );


  //   F[pes]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_2_pes (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_2_pes_we),
    .wd     (hcrhportstatus_2_pes_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.pes.de),
    .d      (hw2reg.hcrhportstatus_2.pes.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.pes.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_pes_qs)
  );


  //   F[pss]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_2_pss (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_2_pss_we),
    .wd     (hcrhportstatus_2_pss_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.pss.de),
    .d      (hw2reg.hcrhportstatus_2.pss.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.pss.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_pss_qs)
  );


  //   F[poci]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_2_poci (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_2_poci_we),
    .wd     (hcrhportstatus_2_poci_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.poci.de),
    .d      (hw2reg.hcrhportstatus_2.poci.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.poci.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_poci_qs)
  );


  //   F[prs]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_2_prs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_2_prs_we),
    .wd     (hcrhportstatus_2_prs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.prs.de),
    .d      (hw2reg.hcrhportstatus_2.prs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.prs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_prs_qs)
  );


  //   F[reservedlower]: 7:5
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RO"),
    .RESVAL  (3'h0)
  ) u_hcrhportstatus_2_reservedlower (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.reservedlower.de),
    .d      (hw2reg.hcrhportstatus_2.reservedlower.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.reservedlower.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_reservedlower_qs)
  );


  //   F[pps]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_2_pps (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_2_pps_we),
    .wd     (hcrhportstatus_2_pps_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.pps.de),
    .d      (hw2reg.hcrhportstatus_2.pps.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.pps.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_pps_qs)
  );


  //   F[lsda]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_2_lsda (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_2_lsda_we),
    .wd     (hcrhportstatus_2_lsda_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.lsda.de),
    .d      (hw2reg.hcrhportstatus_2.lsda.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.lsda.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_lsda_qs)
  );


  //   F[reservedmid]: 15:10
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RO"),
    .RESVAL  (6'h0)
  ) u_hcrhportstatus_2_reservedmid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.reservedmid.de),
    .d      (hw2reg.hcrhportstatus_2.reservedmid.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.reservedmid.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_reservedmid_qs)
  );


  //   F[csc]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_2_csc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_2_csc_we),
    .wd     (hcrhportstatus_2_csc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.csc.de),
    .d      (hw2reg.hcrhportstatus_2.csc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.csc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_csc_qs)
  );


  //   F[pesc]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_2_pesc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_2_pesc_we),
    .wd     (hcrhportstatus_2_pesc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.pesc.de),
    .d      (hw2reg.hcrhportstatus_2.pesc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.pesc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_pesc_qs)
  );


  //   F[pssc]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_2_pssc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_2_pssc_we),
    .wd     (hcrhportstatus_2_pssc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.pssc.de),
    .d      (hw2reg.hcrhportstatus_2.pssc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.pssc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_pssc_qs)
  );


  //   F[ocic]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_2_ocic (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_2_ocic_we),
    .wd     (hcrhportstatus_2_ocic_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.ocic.de),
    .d      (hw2reg.hcrhportstatus_2.ocic.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.ocic.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_ocic_qs)
  );


  //   F[prsc]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_2_prsc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_2_prsc_we),
    .wd     (hcrhportstatus_2_prsc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.prsc.de),
    .d      (hw2reg.hcrhportstatus_2.prsc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.prsc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_prsc_qs)
  );


  //   F[reservedupper]: 31:21
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RO"),
    .RESVAL  (11'h0)
  ) u_hcrhportstatus_2_reservedupper (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_2.reservedupper.de),
    .d      (hw2reg.hcrhportstatus_2.reservedupper.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_2.reservedupper.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_2_reservedupper_qs)
  );


  // R[hcrhportstatus_3]: V(False)

  //   F[ccs]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_3_ccs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_3_ccs_we),
    .wd     (hcrhportstatus_3_ccs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.ccs.de),
    .d      (hw2reg.hcrhportstatus_3.ccs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.ccs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_ccs_qs)
  );


  //   F[pes]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_3_pes (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_3_pes_we),
    .wd     (hcrhportstatus_3_pes_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.pes.de),
    .d      (hw2reg.hcrhportstatus_3.pes.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.pes.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_pes_qs)
  );


  //   F[pss]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_3_pss (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_3_pss_we),
    .wd     (hcrhportstatus_3_pss_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.pss.de),
    .d      (hw2reg.hcrhportstatus_3.pss.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.pss.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_pss_qs)
  );


  //   F[poci]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_3_poci (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_3_poci_we),
    .wd     (hcrhportstatus_3_poci_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.poci.de),
    .d      (hw2reg.hcrhportstatus_3.poci.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.poci.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_poci_qs)
  );


  //   F[prs]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_3_prs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_3_prs_we),
    .wd     (hcrhportstatus_3_prs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.prs.de),
    .d      (hw2reg.hcrhportstatus_3.prs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.prs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_prs_qs)
  );


  //   F[reservedlower]: 7:5
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RO"),
    .RESVAL  (3'h0)
  ) u_hcrhportstatus_3_reservedlower (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.reservedlower.de),
    .d      (hw2reg.hcrhportstatus_3.reservedlower.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.reservedlower.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_reservedlower_qs)
  );


  //   F[pps]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_3_pps (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_3_pps_we),
    .wd     (hcrhportstatus_3_pps_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.pps.de),
    .d      (hw2reg.hcrhportstatus_3.pps.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.pps.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_pps_qs)
  );


  //   F[lsda]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_3_lsda (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_3_lsda_we),
    .wd     (hcrhportstatus_3_lsda_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.lsda.de),
    .d      (hw2reg.hcrhportstatus_3.lsda.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.lsda.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_lsda_qs)
  );


  //   F[reservedmid]: 15:10
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RO"),
    .RESVAL  (6'h0)
  ) u_hcrhportstatus_3_reservedmid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.reservedmid.de),
    .d      (hw2reg.hcrhportstatus_3.reservedmid.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.reservedmid.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_reservedmid_qs)
  );


  //   F[csc]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_3_csc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_3_csc_we),
    .wd     (hcrhportstatus_3_csc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.csc.de),
    .d      (hw2reg.hcrhportstatus_3.csc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.csc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_csc_qs)
  );


  //   F[pesc]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_3_pesc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_3_pesc_we),
    .wd     (hcrhportstatus_3_pesc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.pesc.de),
    .d      (hw2reg.hcrhportstatus_3.pesc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.pesc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_pesc_qs)
  );


  //   F[pssc]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_3_pssc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_3_pssc_we),
    .wd     (hcrhportstatus_3_pssc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.pssc.de),
    .d      (hw2reg.hcrhportstatus_3.pssc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.pssc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_pssc_qs)
  );


  //   F[ocic]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_3_ocic (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_3_ocic_we),
    .wd     (hcrhportstatus_3_ocic_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.ocic.de),
    .d      (hw2reg.hcrhportstatus_3.ocic.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.ocic.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_ocic_qs)
  );


  //   F[prsc]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_3_prsc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_3_prsc_we),
    .wd     (hcrhportstatus_3_prsc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.prsc.de),
    .d      (hw2reg.hcrhportstatus_3.prsc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.prsc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_prsc_qs)
  );


  //   F[reservedupper]: 31:21
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RO"),
    .RESVAL  (11'h0)
  ) u_hcrhportstatus_3_reservedupper (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_3.reservedupper.de),
    .d      (hw2reg.hcrhportstatus_3.reservedupper.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_3.reservedupper.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_3_reservedupper_qs)
  );


  // R[hcrhportstatus_4]: V(False)

  //   F[ccs]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_4_ccs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_4_ccs_we),
    .wd     (hcrhportstatus_4_ccs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.ccs.de),
    .d      (hw2reg.hcrhportstatus_4.ccs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.ccs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_ccs_qs)
  );


  //   F[pes]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_4_pes (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_4_pes_we),
    .wd     (hcrhportstatus_4_pes_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.pes.de),
    .d      (hw2reg.hcrhportstatus_4.pes.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.pes.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_pes_qs)
  );


  //   F[pss]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_4_pss (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_4_pss_we),
    .wd     (hcrhportstatus_4_pss_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.pss.de),
    .d      (hw2reg.hcrhportstatus_4.pss.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.pss.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_pss_qs)
  );


  //   F[poci]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_4_poci (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_4_poci_we),
    .wd     (hcrhportstatus_4_poci_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.poci.de),
    .d      (hw2reg.hcrhportstatus_4.poci.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.poci.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_poci_qs)
  );


  //   F[prs]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_4_prs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_4_prs_we),
    .wd     (hcrhportstatus_4_prs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.prs.de),
    .d      (hw2reg.hcrhportstatus_4.prs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.prs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_prs_qs)
  );


  //   F[reservedlower]: 7:5
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RO"),
    .RESVAL  (3'h0)
  ) u_hcrhportstatus_4_reservedlower (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.reservedlower.de),
    .d      (hw2reg.hcrhportstatus_4.reservedlower.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.reservedlower.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_reservedlower_qs)
  );


  //   F[pps]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_4_pps (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_4_pps_we),
    .wd     (hcrhportstatus_4_pps_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.pps.de),
    .d      (hw2reg.hcrhportstatus_4.pps.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.pps.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_pps_qs)
  );


  //   F[lsda]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_4_lsda (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_4_lsda_we),
    .wd     (hcrhportstatus_4_lsda_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.lsda.de),
    .d      (hw2reg.hcrhportstatus_4.lsda.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.lsda.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_lsda_qs)
  );


  //   F[reservedmid]: 15:10
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RO"),
    .RESVAL  (6'h0)
  ) u_hcrhportstatus_4_reservedmid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.reservedmid.de),
    .d      (hw2reg.hcrhportstatus_4.reservedmid.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.reservedmid.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_reservedmid_qs)
  );


  //   F[csc]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_4_csc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_4_csc_we),
    .wd     (hcrhportstatus_4_csc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.csc.de),
    .d      (hw2reg.hcrhportstatus_4.csc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.csc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_csc_qs)
  );


  //   F[pesc]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_4_pesc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_4_pesc_we),
    .wd     (hcrhportstatus_4_pesc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.pesc.de),
    .d      (hw2reg.hcrhportstatus_4.pesc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.pesc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_pesc_qs)
  );


  //   F[pssc]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_4_pssc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_4_pssc_we),
    .wd     (hcrhportstatus_4_pssc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.pssc.de),
    .d      (hw2reg.hcrhportstatus_4.pssc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.pssc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_pssc_qs)
  );


  //   F[ocic]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_4_ocic (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_4_ocic_we),
    .wd     (hcrhportstatus_4_ocic_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.ocic.de),
    .d      (hw2reg.hcrhportstatus_4.ocic.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.ocic.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_ocic_qs)
  );


  //   F[prsc]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_4_prsc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_4_prsc_we),
    .wd     (hcrhportstatus_4_prsc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.prsc.de),
    .d      (hw2reg.hcrhportstatus_4.prsc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.prsc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_prsc_qs)
  );


  //   F[reservedupper]: 31:21
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RO"),
    .RESVAL  (11'h0)
  ) u_hcrhportstatus_4_reservedupper (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_4.reservedupper.de),
    .d      (hw2reg.hcrhportstatus_4.reservedupper.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_4.reservedupper.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_4_reservedupper_qs)
  );


  // R[hcrhportstatus_5]: V(False)

  //   F[ccs]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_5_ccs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_5_ccs_we),
    .wd     (hcrhportstatus_5_ccs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.ccs.de),
    .d      (hw2reg.hcrhportstatus_5.ccs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.ccs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_ccs_qs)
  );


  //   F[pes]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_5_pes (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_5_pes_we),
    .wd     (hcrhportstatus_5_pes_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.pes.de),
    .d      (hw2reg.hcrhportstatus_5.pes.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.pes.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_pes_qs)
  );


  //   F[pss]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_5_pss (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_5_pss_we),
    .wd     (hcrhportstatus_5_pss_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.pss.de),
    .d      (hw2reg.hcrhportstatus_5.pss.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.pss.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_pss_qs)
  );


  //   F[poci]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_5_poci (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_5_poci_we),
    .wd     (hcrhportstatus_5_poci_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.poci.de),
    .d      (hw2reg.hcrhportstatus_5.poci.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.poci.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_poci_qs)
  );


  //   F[prs]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_5_prs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_5_prs_we),
    .wd     (hcrhportstatus_5_prs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.prs.de),
    .d      (hw2reg.hcrhportstatus_5.prs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.prs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_prs_qs)
  );


  //   F[reservedlower]: 7:5
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RO"),
    .RESVAL  (3'h0)
  ) u_hcrhportstatus_5_reservedlower (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.reservedlower.de),
    .d      (hw2reg.hcrhportstatus_5.reservedlower.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.reservedlower.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_reservedlower_qs)
  );


  //   F[pps]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_5_pps (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_5_pps_we),
    .wd     (hcrhportstatus_5_pps_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.pps.de),
    .d      (hw2reg.hcrhportstatus_5.pps.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.pps.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_pps_qs)
  );


  //   F[lsda]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_5_lsda (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_5_lsda_we),
    .wd     (hcrhportstatus_5_lsda_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.lsda.de),
    .d      (hw2reg.hcrhportstatus_5.lsda.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.lsda.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_lsda_qs)
  );


  //   F[reservedmid]: 15:10
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RO"),
    .RESVAL  (6'h0)
  ) u_hcrhportstatus_5_reservedmid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.reservedmid.de),
    .d      (hw2reg.hcrhportstatus_5.reservedmid.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.reservedmid.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_reservedmid_qs)
  );


  //   F[csc]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_5_csc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_5_csc_we),
    .wd     (hcrhportstatus_5_csc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.csc.de),
    .d      (hw2reg.hcrhportstatus_5.csc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.csc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_csc_qs)
  );


  //   F[pesc]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_5_pesc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_5_pesc_we),
    .wd     (hcrhportstatus_5_pesc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.pesc.de),
    .d      (hw2reg.hcrhportstatus_5.pesc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.pesc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_pesc_qs)
  );


  //   F[pssc]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_5_pssc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_5_pssc_we),
    .wd     (hcrhportstatus_5_pssc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.pssc.de),
    .d      (hw2reg.hcrhportstatus_5.pssc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.pssc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_pssc_qs)
  );


  //   F[ocic]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_5_ocic (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_5_ocic_we),
    .wd     (hcrhportstatus_5_ocic_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.ocic.de),
    .d      (hw2reg.hcrhportstatus_5.ocic.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.ocic.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_ocic_qs)
  );


  //   F[prsc]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_5_prsc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_5_prsc_we),
    .wd     (hcrhportstatus_5_prsc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.prsc.de),
    .d      (hw2reg.hcrhportstatus_5.prsc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.prsc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_prsc_qs)
  );


  //   F[reservedupper]: 31:21
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RO"),
    .RESVAL  (11'h0)
  ) u_hcrhportstatus_5_reservedupper (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_5.reservedupper.de),
    .d      (hw2reg.hcrhportstatus_5.reservedupper.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_5.reservedupper.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_5_reservedupper_qs)
  );


  // R[hcrhportstatus_6]: V(False)

  //   F[ccs]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_6_ccs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_6_ccs_we),
    .wd     (hcrhportstatus_6_ccs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.ccs.de),
    .d      (hw2reg.hcrhportstatus_6.ccs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.ccs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_ccs_qs)
  );


  //   F[pes]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_6_pes (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_6_pes_we),
    .wd     (hcrhportstatus_6_pes_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.pes.de),
    .d      (hw2reg.hcrhportstatus_6.pes.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.pes.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_pes_qs)
  );


  //   F[pss]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_6_pss (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_6_pss_we),
    .wd     (hcrhportstatus_6_pss_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.pss.de),
    .d      (hw2reg.hcrhportstatus_6.pss.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.pss.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_pss_qs)
  );


  //   F[poci]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_6_poci (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_6_poci_we),
    .wd     (hcrhportstatus_6_poci_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.poci.de),
    .d      (hw2reg.hcrhportstatus_6.poci.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.poci.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_poci_qs)
  );


  //   F[prs]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_6_prs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_6_prs_we),
    .wd     (hcrhportstatus_6_prs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.prs.de),
    .d      (hw2reg.hcrhportstatus_6.prs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.prs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_prs_qs)
  );


  //   F[reservedlower]: 7:5
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RO"),
    .RESVAL  (3'h0)
  ) u_hcrhportstatus_6_reservedlower (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.reservedlower.de),
    .d      (hw2reg.hcrhportstatus_6.reservedlower.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.reservedlower.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_reservedlower_qs)
  );


  //   F[pps]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_6_pps (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_6_pps_we),
    .wd     (hcrhportstatus_6_pps_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.pps.de),
    .d      (hw2reg.hcrhportstatus_6.pps.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.pps.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_pps_qs)
  );


  //   F[lsda]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_6_lsda (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_6_lsda_we),
    .wd     (hcrhportstatus_6_lsda_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.lsda.de),
    .d      (hw2reg.hcrhportstatus_6.lsda.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.lsda.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_lsda_qs)
  );


  //   F[reservedmid]: 15:10
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RO"),
    .RESVAL  (6'h0)
  ) u_hcrhportstatus_6_reservedmid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.reservedmid.de),
    .d      (hw2reg.hcrhportstatus_6.reservedmid.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.reservedmid.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_reservedmid_qs)
  );


  //   F[csc]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_6_csc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_6_csc_we),
    .wd     (hcrhportstatus_6_csc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.csc.de),
    .d      (hw2reg.hcrhportstatus_6.csc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.csc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_csc_qs)
  );


  //   F[pesc]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_6_pesc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_6_pesc_we),
    .wd     (hcrhportstatus_6_pesc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.pesc.de),
    .d      (hw2reg.hcrhportstatus_6.pesc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.pesc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_pesc_qs)
  );


  //   F[pssc]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_6_pssc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_6_pssc_we),
    .wd     (hcrhportstatus_6_pssc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.pssc.de),
    .d      (hw2reg.hcrhportstatus_6.pssc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.pssc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_pssc_qs)
  );


  //   F[ocic]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_6_ocic (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_6_ocic_we),
    .wd     (hcrhportstatus_6_ocic_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.ocic.de),
    .d      (hw2reg.hcrhportstatus_6.ocic.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.ocic.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_ocic_qs)
  );


  //   F[prsc]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_6_prsc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_6_prsc_we),
    .wd     (hcrhportstatus_6_prsc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.prsc.de),
    .d      (hw2reg.hcrhportstatus_6.prsc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.prsc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_prsc_qs)
  );


  //   F[reservedupper]: 31:21
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RO"),
    .RESVAL  (11'h0)
  ) u_hcrhportstatus_6_reservedupper (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_6.reservedupper.de),
    .d      (hw2reg.hcrhportstatus_6.reservedupper.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_6.reservedupper.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_6_reservedupper_qs)
  );


  // R[hcrhportstatus_7]: V(False)

  //   F[ccs]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_7_ccs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_7_ccs_we),
    .wd     (hcrhportstatus_7_ccs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.ccs.de),
    .d      (hw2reg.hcrhportstatus_7.ccs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.ccs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_ccs_qs)
  );


  //   F[pes]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_7_pes (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_7_pes_we),
    .wd     (hcrhportstatus_7_pes_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.pes.de),
    .d      (hw2reg.hcrhportstatus_7.pes.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.pes.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_pes_qs)
  );


  //   F[pss]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_7_pss (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_7_pss_we),
    .wd     (hcrhportstatus_7_pss_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.pss.de),
    .d      (hw2reg.hcrhportstatus_7.pss.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.pss.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_pss_qs)
  );


  //   F[poci]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_7_poci (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_7_poci_we),
    .wd     (hcrhportstatus_7_poci_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.poci.de),
    .d      (hw2reg.hcrhportstatus_7.poci.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.poci.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_poci_qs)
  );


  //   F[prs]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_7_prs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_7_prs_we),
    .wd     (hcrhportstatus_7_prs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.prs.de),
    .d      (hw2reg.hcrhportstatus_7.prs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.prs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_prs_qs)
  );


  //   F[reservedlower]: 7:5
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RO"),
    .RESVAL  (3'h0)
  ) u_hcrhportstatus_7_reservedlower (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.reservedlower.de),
    .d      (hw2reg.hcrhportstatus_7.reservedlower.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.reservedlower.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_reservedlower_qs)
  );


  //   F[pps]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_7_pps (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_7_pps_we),
    .wd     (hcrhportstatus_7_pps_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.pps.de),
    .d      (hw2reg.hcrhportstatus_7.pps.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.pps.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_pps_qs)
  );


  //   F[lsda]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_7_lsda (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_7_lsda_we),
    .wd     (hcrhportstatus_7_lsda_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.lsda.de),
    .d      (hw2reg.hcrhportstatus_7.lsda.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.lsda.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_lsda_qs)
  );


  //   F[reservedmid]: 15:10
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RO"),
    .RESVAL  (6'h0)
  ) u_hcrhportstatus_7_reservedmid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.reservedmid.de),
    .d      (hw2reg.hcrhportstatus_7.reservedmid.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.reservedmid.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_reservedmid_qs)
  );


  //   F[csc]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_7_csc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_7_csc_we),
    .wd     (hcrhportstatus_7_csc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.csc.de),
    .d      (hw2reg.hcrhportstatus_7.csc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.csc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_csc_qs)
  );


  //   F[pesc]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_7_pesc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_7_pesc_we),
    .wd     (hcrhportstatus_7_pesc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.pesc.de),
    .d      (hw2reg.hcrhportstatus_7.pesc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.pesc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_pesc_qs)
  );


  //   F[pssc]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_7_pssc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_7_pssc_we),
    .wd     (hcrhportstatus_7_pssc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.pssc.de),
    .d      (hw2reg.hcrhportstatus_7.pssc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.pssc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_pssc_qs)
  );


  //   F[ocic]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_7_ocic (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_7_ocic_we),
    .wd     (hcrhportstatus_7_ocic_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.ocic.de),
    .d      (hw2reg.hcrhportstatus_7.ocic.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.ocic.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_ocic_qs)
  );


  //   F[prsc]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_7_prsc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_7_prsc_we),
    .wd     (hcrhportstatus_7_prsc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.prsc.de),
    .d      (hw2reg.hcrhportstatus_7.prsc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.prsc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_prsc_qs)
  );


  //   F[reservedupper]: 31:21
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RO"),
    .RESVAL  (11'h0)
  ) u_hcrhportstatus_7_reservedupper (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_7.reservedupper.de),
    .d      (hw2reg.hcrhportstatus_7.reservedupper.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_7.reservedupper.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_7_reservedupper_qs)
  );


  // R[hcrhportstatus_8]: V(False)

  //   F[ccs]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_8_ccs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_8_ccs_we),
    .wd     (hcrhportstatus_8_ccs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.ccs.de),
    .d      (hw2reg.hcrhportstatus_8.ccs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.ccs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_ccs_qs)
  );


  //   F[pes]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_8_pes (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_8_pes_we),
    .wd     (hcrhportstatus_8_pes_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.pes.de),
    .d      (hw2reg.hcrhportstatus_8.pes.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.pes.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_pes_qs)
  );


  //   F[pss]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_8_pss (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_8_pss_we),
    .wd     (hcrhportstatus_8_pss_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.pss.de),
    .d      (hw2reg.hcrhportstatus_8.pss.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.pss.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_pss_qs)
  );


  //   F[poci]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_8_poci (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_8_poci_we),
    .wd     (hcrhportstatus_8_poci_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.poci.de),
    .d      (hw2reg.hcrhportstatus_8.poci.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.poci.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_poci_qs)
  );


  //   F[prs]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_8_prs (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_8_prs_we),
    .wd     (hcrhportstatus_8_prs_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.prs.de),
    .d      (hw2reg.hcrhportstatus_8.prs.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.prs.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_prs_qs)
  );


  //   F[reservedlower]: 7:5
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RO"),
    .RESVAL  (3'h0)
  ) u_hcrhportstatus_8_reservedlower (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.reservedlower.de),
    .d      (hw2reg.hcrhportstatus_8.reservedlower.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.reservedlower.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_reservedlower_qs)
  );


  //   F[pps]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_8_pps (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_8_pps_we),
    .wd     (hcrhportstatus_8_pps_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.pps.de),
    .d      (hw2reg.hcrhportstatus_8.pps.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.pps.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_pps_qs)
  );


  //   F[lsda]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_8_lsda (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_8_lsda_we),
    .wd     (hcrhportstatus_8_lsda_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.lsda.de),
    .d      (hw2reg.hcrhportstatus_8.lsda.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.lsda.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_lsda_qs)
  );


  //   F[reservedmid]: 15:10
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RO"),
    .RESVAL  (6'h0)
  ) u_hcrhportstatus_8_reservedmid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.reservedmid.de),
    .d      (hw2reg.hcrhportstatus_8.reservedmid.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.reservedmid.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_reservedmid_qs)
  );


  //   F[csc]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_8_csc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_8_csc_we),
    .wd     (hcrhportstatus_8_csc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.csc.de),
    .d      (hw2reg.hcrhportstatus_8.csc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.csc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_csc_qs)
  );


  //   F[pesc]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_8_pesc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_8_pesc_we),
    .wd     (hcrhportstatus_8_pesc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.pesc.de),
    .d      (hw2reg.hcrhportstatus_8.pesc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.pesc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_pesc_qs)
  );


  //   F[pssc]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_8_pssc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_8_pssc_we),
    .wd     (hcrhportstatus_8_pssc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.pssc.de),
    .d      (hw2reg.hcrhportstatus_8.pssc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.pssc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_pssc_qs)
  );


  //   F[ocic]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_8_ocic (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_8_ocic_we),
    .wd     (hcrhportstatus_8_ocic_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.ocic.de),
    .d      (hw2reg.hcrhportstatus_8.ocic.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.ocic.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_ocic_qs)
  );


  //   F[prsc]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_hcrhportstatus_8_prsc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hcrhportstatus_8_prsc_we),
    .wd     (hcrhportstatus_8_prsc_wd),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.prsc.de),
    .d      (hw2reg.hcrhportstatus_8.prsc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.prsc.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_prsc_qs)
  );


  //   F[reservedupper]: 31:21
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RO"),
    .RESVAL  (11'h0)
  ) u_hcrhportstatus_8_reservedupper (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.hcrhportstatus_8.reservedupper.de),
    .d      (hw2reg.hcrhportstatus_8.reservedupper.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hcrhportstatus_8.reservedupper.q ),

    // to register interface (read)
    .qs     (hcrhportstatus_8_reservedupper_qs)
  );




  logic [28:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == NEWUSB_HCREVISION_OFFSET);
    addr_hit[ 1] = (reg_addr == NEWUSB_HCCONTROL_OFFSET);
    addr_hit[ 2] = (reg_addr == NEWUSB_HCCOMMANDSTATUS_OFFSET);
    addr_hit[ 3] = (reg_addr == NEWUSB_HCINTERRUPTSTATUS_OFFSET);
    addr_hit[ 4] = (reg_addr == NEWUSB_HCINTERRUPTENABLE_OFFSET);
    addr_hit[ 5] = (reg_addr == NEWUSB_HCINTERRUPTDISABLE_OFFSET);
    addr_hit[ 6] = (reg_addr == NEWUSB_HCHCAA_OFFSET);
    addr_hit[ 7] = (reg_addr == NEWUSB_HCPERIODCURRENTED_OFFSET);
    addr_hit[ 8] = (reg_addr == NEWUSB_HCCONTROLHEADED_OFFSET);
    addr_hit[ 9] = (reg_addr == NEWUSB_HCCONTROLCURRENTED_OFFSET);
    addr_hit[10] = (reg_addr == NEWUSB_HCBULKHEADED_OFFSET);
    addr_hit[11] = (reg_addr == NEWUSB_HCBULKCURRENTED_OFFSET);
    addr_hit[12] = (reg_addr == NEWUSB_HCDONEHEAD_OFFSET);
    addr_hit[13] = (reg_addr == NEWUSB_HCFMINTERVAL_OFFSET);
    addr_hit[14] = (reg_addr == NEWUSB_HCFMREMAINING_OFFSET);
    addr_hit[15] = (reg_addr == NEWUSB_HCFMNUMBER_OFFSET);
    addr_hit[16] = (reg_addr == NEWUSB_HCPERIODICSTART_OFFSET);
    addr_hit[17] = (reg_addr == NEWUSB_HCLSTHRESHOLD_OFFSET);
    addr_hit[18] = (reg_addr == NEWUSB_HCRHDESCRIPTORA_OFFSET);
    addr_hit[19] = (reg_addr == NEWUSB_HCRHDESCRIPTORB_OFFSET);
    addr_hit[20] = (reg_addr == NEWUSB_HCRHSTATUS_OFFSET);
    addr_hit[21] = (reg_addr == NEWUSB_HCRHPORTSTATUS_1_OFFSET);
    addr_hit[22] = (reg_addr == NEWUSB_HCRHPORTSTATUS_2_OFFSET);
    addr_hit[23] = (reg_addr == NEWUSB_HCRHPORTSTATUS_3_OFFSET);
    addr_hit[24] = (reg_addr == NEWUSB_HCRHPORTSTATUS_4_OFFSET);
    addr_hit[25] = (reg_addr == NEWUSB_HCRHPORTSTATUS_5_OFFSET);
    addr_hit[26] = (reg_addr == NEWUSB_HCRHPORTSTATUS_6_OFFSET);
    addr_hit[27] = (reg_addr == NEWUSB_HCRHPORTSTATUS_7_OFFSET);
    addr_hit[28] = (reg_addr == NEWUSB_HCRHPORTSTATUS_8_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(NEWUSB_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(NEWUSB_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(NEWUSB_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(NEWUSB_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(NEWUSB_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(NEWUSB_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(NEWUSB_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(NEWUSB_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(NEWUSB_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(NEWUSB_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(NEWUSB_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(NEWUSB_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(NEWUSB_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(NEWUSB_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(NEWUSB_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(NEWUSB_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(NEWUSB_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(NEWUSB_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(NEWUSB_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(NEWUSB_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(NEWUSB_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(NEWUSB_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(NEWUSB_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(NEWUSB_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(NEWUSB_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(NEWUSB_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(NEWUSB_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(NEWUSB_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(NEWUSB_PERMIT[28] & ~reg_be)))));
  end

  assign hccontrol_cbsr_we = addr_hit[1] & reg_we & !reg_error;
  assign hccontrol_cbsr_wd = reg_wdata[1:0];
  assign hccontrol_cbsr_re = addr_hit[1] & reg_re & !reg_error;

  assign hccontrol_ple_we = addr_hit[1] & reg_we & !reg_error;
  assign hccontrol_ple_wd = reg_wdata[2];
  assign hccontrol_ple_re = addr_hit[1] & reg_re & !reg_error;

  assign hccontrol_ie_we = addr_hit[1] & reg_we & !reg_error;
  assign hccontrol_ie_wd = reg_wdata[3];
  assign hccontrol_ie_re = addr_hit[1] & reg_re & !reg_error;

  assign hccontrol_cle_we = addr_hit[1] & reg_we & !reg_error;
  assign hccontrol_cle_wd = reg_wdata[4];
  assign hccontrol_cle_re = addr_hit[1] & reg_re & !reg_error;

  assign hccontrol_ble_we = addr_hit[1] & reg_we & !reg_error;
  assign hccontrol_ble_wd = reg_wdata[5];
  assign hccontrol_ble_re = addr_hit[1] & reg_re & !reg_error;

  assign hccontrol_hcfs_we = addr_hit[1] & reg_we & !reg_error;
  assign hccontrol_hcfs_wd = reg_wdata[7:6];
  assign hccontrol_hcfs_re = addr_hit[1] & reg_re & !reg_error;

  assign hccontrol_ir_we = addr_hit[1] & reg_we & !reg_error;
  assign hccontrol_ir_wd = reg_wdata[8];
  assign hccontrol_ir_re = addr_hit[1] & reg_re & !reg_error;

  assign hccontrol_rwc_we = addr_hit[1] & reg_we & !reg_error;
  assign hccontrol_rwc_wd = reg_wdata[9];
  assign hccontrol_rwc_re = addr_hit[1] & reg_re & !reg_error;

  assign hccontrol_rwe_we = addr_hit[1] & reg_we & !reg_error;
  assign hccontrol_rwe_wd = reg_wdata[10];
  assign hccontrol_rwe_re = addr_hit[1] & reg_re & !reg_error;

  assign hccontrol_reserved_re = addr_hit[1] & reg_re & !reg_error;

  assign hccommandstatus_hcr_we = addr_hit[2] & reg_we & !reg_error;
  assign hccommandstatus_hcr_wd = reg_wdata[0];
  assign hccommandstatus_hcr_re = addr_hit[2] & reg_re & !reg_error;

  assign hccommandstatus_clf_we = addr_hit[2] & reg_we & !reg_error;
  assign hccommandstatus_clf_wd = reg_wdata[1];
  assign hccommandstatus_clf_re = addr_hit[2] & reg_re & !reg_error;

  assign hccommandstatus_blf_we = addr_hit[2] & reg_we & !reg_error;
  assign hccommandstatus_blf_wd = reg_wdata[2];
  assign hccommandstatus_blf_re = addr_hit[2] & reg_re & !reg_error;

  assign hccommandstatus_ocr_we = addr_hit[2] & reg_we & !reg_error;
  assign hccommandstatus_ocr_wd = reg_wdata[3];
  assign hccommandstatus_ocr_re = addr_hit[2] & reg_re & !reg_error;

  assign hccommandstatus_reservedlower_re = addr_hit[2] & reg_re & !reg_error;

  assign hccommandstatus_soc_re = addr_hit[2] & reg_re & !reg_error;

  assign hccommandstatus_reservedupper_re = addr_hit[2] & reg_re & !reg_error;

  assign hcinterruptstatus_so_we = addr_hit[3] & reg_we & !reg_error;
  assign hcinterruptstatus_so_wd = reg_wdata[0];
  assign hcinterruptstatus_so_re = addr_hit[3] & reg_re & !reg_error;

  assign hcinterruptstatus_wdh_we = addr_hit[3] & reg_we & !reg_error;
  assign hcinterruptstatus_wdh_wd = reg_wdata[1];
  assign hcinterruptstatus_wdh_re = addr_hit[3] & reg_re & !reg_error;

  assign hcinterruptstatus_sf_we = addr_hit[3] & reg_we & !reg_error;
  assign hcinterruptstatus_sf_wd = reg_wdata[2];
  assign hcinterruptstatus_sf_re = addr_hit[3] & reg_re & !reg_error;

  assign hcinterruptstatus_rd_we = addr_hit[3] & reg_we & !reg_error;
  assign hcinterruptstatus_rd_wd = reg_wdata[3];
  assign hcinterruptstatus_rd_re = addr_hit[3] & reg_re & !reg_error;

  assign hcinterruptstatus_ue_we = addr_hit[3] & reg_we & !reg_error;
  assign hcinterruptstatus_ue_wd = reg_wdata[4];
  assign hcinterruptstatus_ue_re = addr_hit[3] & reg_re & !reg_error;

  assign hcinterruptstatus_fno_we = addr_hit[3] & reg_we & !reg_error;
  assign hcinterruptstatus_fno_wd = reg_wdata[5];
  assign hcinterruptstatus_fno_re = addr_hit[3] & reg_re & !reg_error;

  assign hcinterruptstatus_rhsc_we = addr_hit[3] & reg_we & !reg_error;
  assign hcinterruptstatus_rhsc_wd = reg_wdata[6];
  assign hcinterruptstatus_rhsc_re = addr_hit[3] & reg_re & !reg_error;

  assign hcinterruptstatus_reservedlower_re = addr_hit[3] & reg_re & !reg_error;

  assign hcinterruptstatus_oc_we = addr_hit[3] & reg_we & !reg_error;
  assign hcinterruptstatus_oc_wd = reg_wdata[30];
  assign hcinterruptstatus_oc_re = addr_hit[3] & reg_re & !reg_error;

  assign hcinterruptstatus_reservedupper_re = addr_hit[3] & reg_re & !reg_error;

  assign hcinterruptenable_so_we = addr_hit[4] & reg_we & !reg_error;
  assign hcinterruptenable_so_wd = reg_wdata[0];
  assign hcinterruptenable_so_re = addr_hit[4] & reg_re & !reg_error;

  assign hcinterruptenable_wdh_we = addr_hit[4] & reg_we & !reg_error;
  assign hcinterruptenable_wdh_wd = reg_wdata[1];
  assign hcinterruptenable_wdh_re = addr_hit[4] & reg_re & !reg_error;

  assign hcinterruptenable_sf_we = addr_hit[4] & reg_we & !reg_error;
  assign hcinterruptenable_sf_wd = reg_wdata[2];
  assign hcinterruptenable_sf_re = addr_hit[4] & reg_re & !reg_error;

  assign hcinterruptenable_rd_we = addr_hit[4] & reg_we & !reg_error;
  assign hcinterruptenable_rd_wd = reg_wdata[3];
  assign hcinterruptenable_rd_re = addr_hit[4] & reg_re & !reg_error;

  assign hcinterruptenable_ue_we = addr_hit[4] & reg_we & !reg_error;
  assign hcinterruptenable_ue_wd = reg_wdata[4];
  assign hcinterruptenable_ue_re = addr_hit[4] & reg_re & !reg_error;

  assign hcinterruptenable_fno_we = addr_hit[4] & reg_we & !reg_error;
  assign hcinterruptenable_fno_wd = reg_wdata[5];
  assign hcinterruptenable_fno_re = addr_hit[4] & reg_re & !reg_error;

  assign hcinterruptenable_rhcs_we = addr_hit[4] & reg_we & !reg_error;
  assign hcinterruptenable_rhcs_wd = reg_wdata[6];
  assign hcinterruptenable_rhcs_re = addr_hit[4] & reg_re & !reg_error;

  assign hcinterruptenable_reserved_re = addr_hit[4] & reg_re & !reg_error;

  assign hcinterruptenable_oc_we = addr_hit[4] & reg_we & !reg_error;
  assign hcinterruptenable_oc_wd = reg_wdata[30];
  assign hcinterruptenable_oc_re = addr_hit[4] & reg_re & !reg_error;

  assign hcinterruptenable_mie_we = addr_hit[4] & reg_we & !reg_error;
  assign hcinterruptenable_mie_wd = reg_wdata[31];
  assign hcinterruptenable_mie_re = addr_hit[4] & reg_re & !reg_error;

  assign hcinterruptdisable_so_we = addr_hit[5] & reg_we & !reg_error;
  assign hcinterruptdisable_so_wd = reg_wdata[0];
  assign hcinterruptdisable_so_re = addr_hit[5] & reg_re & !reg_error;

  assign hcinterruptdisable_wdh_we = addr_hit[5] & reg_we & !reg_error;
  assign hcinterruptdisable_wdh_wd = reg_wdata[1];
  assign hcinterruptdisable_wdh_re = addr_hit[5] & reg_re & !reg_error;

  assign hcinterruptdisable_sf_we = addr_hit[5] & reg_we & !reg_error;
  assign hcinterruptdisable_sf_wd = reg_wdata[2];
  assign hcinterruptdisable_sf_re = addr_hit[5] & reg_re & !reg_error;

  assign hcinterruptdisable_rd_we = addr_hit[5] & reg_we & !reg_error;
  assign hcinterruptdisable_rd_wd = reg_wdata[3];
  assign hcinterruptdisable_rd_re = addr_hit[5] & reg_re & !reg_error;

  assign hcinterruptdisable_ue_we = addr_hit[5] & reg_we & !reg_error;
  assign hcinterruptdisable_ue_wd = reg_wdata[4];
  assign hcinterruptdisable_ue_re = addr_hit[5] & reg_re & !reg_error;

  assign hcinterruptdisable_fno_we = addr_hit[5] & reg_we & !reg_error;
  assign hcinterruptdisable_fno_wd = reg_wdata[5];
  assign hcinterruptdisable_fno_re = addr_hit[5] & reg_re & !reg_error;

  assign hcinterruptdisable_rhcs_we = addr_hit[5] & reg_we & !reg_error;
  assign hcinterruptdisable_rhcs_wd = reg_wdata[6];
  assign hcinterruptdisable_rhcs_re = addr_hit[5] & reg_re & !reg_error;

  assign hcinterruptdisable_reserved_re = addr_hit[5] & reg_re & !reg_error;

  assign hcinterruptdisable_oc_we = addr_hit[5] & reg_we & !reg_error;
  assign hcinterruptdisable_oc_wd = reg_wdata[30];
  assign hcinterruptdisable_oc_re = addr_hit[5] & reg_re & !reg_error;

  assign hcinterruptdisable_mie_we = addr_hit[5] & reg_we & !reg_error;
  assign hcinterruptdisable_mie_wd = reg_wdata[31];
  assign hcinterruptdisable_mie_re = addr_hit[5] & reg_re & !reg_error;

  assign hchcaa_zero_we = addr_hit[6] & reg_we & !reg_error;
  assign hchcaa_zero_wd = reg_wdata[7:0];
  assign hchcaa_zero_re = addr_hit[6] & reg_re & !reg_error;

  assign hchcaa_hcca_we = addr_hit[6] & reg_we & !reg_error;
  assign hchcaa_hcca_wd = reg_wdata[31:8];
  assign hchcaa_hcca_re = addr_hit[6] & reg_re & !reg_error;

  assign hccontrolheaded_zero_we = addr_hit[8] & reg_we & !reg_error;
  assign hccontrolheaded_zero_wd = reg_wdata[3:0];

  assign hccontrolheaded_ched_we = addr_hit[8] & reg_we & !reg_error;
  assign hccontrolheaded_ched_wd = reg_wdata[31:4];

  assign hccontrolcurrented_zero_we = addr_hit[9] & reg_we & !reg_error;
  assign hccontrolcurrented_zero_wd = reg_wdata[3:0];

  assign hccontrolcurrented_cced_we = addr_hit[9] & reg_we & !reg_error;
  assign hccontrolcurrented_cced_wd = reg_wdata[31:4];

  assign hcbulkheaded_zero_we = addr_hit[10] & reg_we & !reg_error;
  assign hcbulkheaded_zero_wd = reg_wdata[3:0];

  assign hcbulkheaded_bhed_we = addr_hit[10] & reg_we & !reg_error;
  assign hcbulkheaded_bhed_wd = reg_wdata[31:4];

  assign hcbulkcurrented_zero_we = addr_hit[11] & reg_we & !reg_error;
  assign hcbulkcurrented_zero_wd = reg_wdata[3:0];

  assign hcbulkcurrented_bced_we = addr_hit[11] & reg_we & !reg_error;
  assign hcbulkcurrented_bced_wd = reg_wdata[31:4];

  assign hcfminterval_fi_we = addr_hit[13] & reg_we & !reg_error;
  assign hcfminterval_fi_wd = reg_wdata[13:0];

  assign hcfminterval_fsmps_we = addr_hit[13] & reg_we & !reg_error;
  assign hcfminterval_fsmps_wd = reg_wdata[30:16];

  assign hcfminterval_fit_we = addr_hit[13] & reg_we & !reg_error;
  assign hcfminterval_fit_wd = reg_wdata[31];

  assign hcperiodicstart_ps_we = addr_hit[16] & reg_we & !reg_error;
  assign hcperiodicstart_ps_wd = reg_wdata[13:0];

  assign hclsthreshold_lst_we = addr_hit[17] & reg_we & !reg_error;
  assign hclsthreshold_lst_wd = reg_wdata[11:0];

  assign hcrhdescriptora_nps_we = addr_hit[18] & reg_we & !reg_error;
  assign hcrhdescriptora_nps_wd = reg_wdata[8];

  assign hcrhdescriptora_psm_we = addr_hit[18] & reg_we & !reg_error;
  assign hcrhdescriptora_psm_wd = reg_wdata[9];

  assign hcrhdescriptora_ocpm_we = addr_hit[18] & reg_we & !reg_error;
  assign hcrhdescriptora_ocpm_wd = reg_wdata[11];

  assign hcrhdescriptora_nocp_we = addr_hit[18] & reg_we & !reg_error;
  assign hcrhdescriptora_nocp_wd = reg_wdata[12];

  assign hcrhdescriptora_potpgt_we = addr_hit[18] & reg_we & !reg_error;
  assign hcrhdescriptora_potpgt_wd = reg_wdata[31:24];

  assign hcrhdescriptorb_dr_we = addr_hit[19] & reg_we & !reg_error;
  assign hcrhdescriptorb_dr_wd = reg_wdata[15:0];

  assign hcrhdescriptorb_ppcm_we = addr_hit[19] & reg_we & !reg_error;
  assign hcrhdescriptorb_ppcm_wd = reg_wdata[31:16];

  assign hcrhstatus_lps_we = addr_hit[20] & reg_we & !reg_error;
  assign hcrhstatus_lps_wd = reg_wdata[0];

  assign hcrhstatus_drwe_we = addr_hit[20] & reg_we & !reg_error;
  assign hcrhstatus_drwe_wd = reg_wdata[15];

  assign hcrhstatus_lpsc_we = addr_hit[20] & reg_we & !reg_error;
  assign hcrhstatus_lpsc_wd = reg_wdata[16];

  assign hcrhstatus_ocic_we = addr_hit[20] & reg_we & !reg_error;
  assign hcrhstatus_ocic_wd = reg_wdata[17];

  assign hcrhstatus_crwe_we = addr_hit[20] & reg_we & !reg_error;
  assign hcrhstatus_crwe_wd = reg_wdata[31];

  assign hcrhportstatus_1_ccs_we = addr_hit[21] & reg_we & !reg_error;
  assign hcrhportstatus_1_ccs_wd = reg_wdata[0];

  assign hcrhportstatus_1_pes_we = addr_hit[21] & reg_we & !reg_error;
  assign hcrhportstatus_1_pes_wd = reg_wdata[1];

  assign hcrhportstatus_1_pss_we = addr_hit[21] & reg_we & !reg_error;
  assign hcrhportstatus_1_pss_wd = reg_wdata[2];

  assign hcrhportstatus_1_poci_we = addr_hit[21] & reg_we & !reg_error;
  assign hcrhportstatus_1_poci_wd = reg_wdata[3];

  assign hcrhportstatus_1_prs_we = addr_hit[21] & reg_we & !reg_error;
  assign hcrhportstatus_1_prs_wd = reg_wdata[4];

  assign hcrhportstatus_1_pps_we = addr_hit[21] & reg_we & !reg_error;
  assign hcrhportstatus_1_pps_wd = reg_wdata[8];

  assign hcrhportstatus_1_lsda_we = addr_hit[21] & reg_we & !reg_error;
  assign hcrhportstatus_1_lsda_wd = reg_wdata[9];

  assign hcrhportstatus_1_csc_we = addr_hit[21] & reg_we & !reg_error;
  assign hcrhportstatus_1_csc_wd = reg_wdata[16];

  assign hcrhportstatus_1_pesc_we = addr_hit[21] & reg_we & !reg_error;
  assign hcrhportstatus_1_pesc_wd = reg_wdata[17];

  assign hcrhportstatus_1_pssc_we = addr_hit[21] & reg_we & !reg_error;
  assign hcrhportstatus_1_pssc_wd = reg_wdata[18];

  assign hcrhportstatus_1_ocic_we = addr_hit[21] & reg_we & !reg_error;
  assign hcrhportstatus_1_ocic_wd = reg_wdata[19];

  assign hcrhportstatus_1_prsc_we = addr_hit[21] & reg_we & !reg_error;
  assign hcrhportstatus_1_prsc_wd = reg_wdata[20];

  assign hcrhportstatus_2_ccs_we = addr_hit[22] & reg_we & !reg_error;
  assign hcrhportstatus_2_ccs_wd = reg_wdata[0];

  assign hcrhportstatus_2_pes_we = addr_hit[22] & reg_we & !reg_error;
  assign hcrhportstatus_2_pes_wd = reg_wdata[1];

  assign hcrhportstatus_2_pss_we = addr_hit[22] & reg_we & !reg_error;
  assign hcrhportstatus_2_pss_wd = reg_wdata[2];

  assign hcrhportstatus_2_poci_we = addr_hit[22] & reg_we & !reg_error;
  assign hcrhportstatus_2_poci_wd = reg_wdata[3];

  assign hcrhportstatus_2_prs_we = addr_hit[22] & reg_we & !reg_error;
  assign hcrhportstatus_2_prs_wd = reg_wdata[4];

  assign hcrhportstatus_2_pps_we = addr_hit[22] & reg_we & !reg_error;
  assign hcrhportstatus_2_pps_wd = reg_wdata[8];

  assign hcrhportstatus_2_lsda_we = addr_hit[22] & reg_we & !reg_error;
  assign hcrhportstatus_2_lsda_wd = reg_wdata[9];

  assign hcrhportstatus_2_csc_we = addr_hit[22] & reg_we & !reg_error;
  assign hcrhportstatus_2_csc_wd = reg_wdata[16];

  assign hcrhportstatus_2_pesc_we = addr_hit[22] & reg_we & !reg_error;
  assign hcrhportstatus_2_pesc_wd = reg_wdata[17];

  assign hcrhportstatus_2_pssc_we = addr_hit[22] & reg_we & !reg_error;
  assign hcrhportstatus_2_pssc_wd = reg_wdata[18];

  assign hcrhportstatus_2_ocic_we = addr_hit[22] & reg_we & !reg_error;
  assign hcrhportstatus_2_ocic_wd = reg_wdata[19];

  assign hcrhportstatus_2_prsc_we = addr_hit[22] & reg_we & !reg_error;
  assign hcrhportstatus_2_prsc_wd = reg_wdata[20];

  assign hcrhportstatus_3_ccs_we = addr_hit[23] & reg_we & !reg_error;
  assign hcrhportstatus_3_ccs_wd = reg_wdata[0];

  assign hcrhportstatus_3_pes_we = addr_hit[23] & reg_we & !reg_error;
  assign hcrhportstatus_3_pes_wd = reg_wdata[1];

  assign hcrhportstatus_3_pss_we = addr_hit[23] & reg_we & !reg_error;
  assign hcrhportstatus_3_pss_wd = reg_wdata[2];

  assign hcrhportstatus_3_poci_we = addr_hit[23] & reg_we & !reg_error;
  assign hcrhportstatus_3_poci_wd = reg_wdata[3];

  assign hcrhportstatus_3_prs_we = addr_hit[23] & reg_we & !reg_error;
  assign hcrhportstatus_3_prs_wd = reg_wdata[4];

  assign hcrhportstatus_3_pps_we = addr_hit[23] & reg_we & !reg_error;
  assign hcrhportstatus_3_pps_wd = reg_wdata[8];

  assign hcrhportstatus_3_lsda_we = addr_hit[23] & reg_we & !reg_error;
  assign hcrhportstatus_3_lsda_wd = reg_wdata[9];

  assign hcrhportstatus_3_csc_we = addr_hit[23] & reg_we & !reg_error;
  assign hcrhportstatus_3_csc_wd = reg_wdata[16];

  assign hcrhportstatus_3_pesc_we = addr_hit[23] & reg_we & !reg_error;
  assign hcrhportstatus_3_pesc_wd = reg_wdata[17];

  assign hcrhportstatus_3_pssc_we = addr_hit[23] & reg_we & !reg_error;
  assign hcrhportstatus_3_pssc_wd = reg_wdata[18];

  assign hcrhportstatus_3_ocic_we = addr_hit[23] & reg_we & !reg_error;
  assign hcrhportstatus_3_ocic_wd = reg_wdata[19];

  assign hcrhportstatus_3_prsc_we = addr_hit[23] & reg_we & !reg_error;
  assign hcrhportstatus_3_prsc_wd = reg_wdata[20];

  assign hcrhportstatus_4_ccs_we = addr_hit[24] & reg_we & !reg_error;
  assign hcrhportstatus_4_ccs_wd = reg_wdata[0];

  assign hcrhportstatus_4_pes_we = addr_hit[24] & reg_we & !reg_error;
  assign hcrhportstatus_4_pes_wd = reg_wdata[1];

  assign hcrhportstatus_4_pss_we = addr_hit[24] & reg_we & !reg_error;
  assign hcrhportstatus_4_pss_wd = reg_wdata[2];

  assign hcrhportstatus_4_poci_we = addr_hit[24] & reg_we & !reg_error;
  assign hcrhportstatus_4_poci_wd = reg_wdata[3];

  assign hcrhportstatus_4_prs_we = addr_hit[24] & reg_we & !reg_error;
  assign hcrhportstatus_4_prs_wd = reg_wdata[4];

  assign hcrhportstatus_4_pps_we = addr_hit[24] & reg_we & !reg_error;
  assign hcrhportstatus_4_pps_wd = reg_wdata[8];

  assign hcrhportstatus_4_lsda_we = addr_hit[24] & reg_we & !reg_error;
  assign hcrhportstatus_4_lsda_wd = reg_wdata[9];

  assign hcrhportstatus_4_csc_we = addr_hit[24] & reg_we & !reg_error;
  assign hcrhportstatus_4_csc_wd = reg_wdata[16];

  assign hcrhportstatus_4_pesc_we = addr_hit[24] & reg_we & !reg_error;
  assign hcrhportstatus_4_pesc_wd = reg_wdata[17];

  assign hcrhportstatus_4_pssc_we = addr_hit[24] & reg_we & !reg_error;
  assign hcrhportstatus_4_pssc_wd = reg_wdata[18];

  assign hcrhportstatus_4_ocic_we = addr_hit[24] & reg_we & !reg_error;
  assign hcrhportstatus_4_ocic_wd = reg_wdata[19];

  assign hcrhportstatus_4_prsc_we = addr_hit[24] & reg_we & !reg_error;
  assign hcrhportstatus_4_prsc_wd = reg_wdata[20];

  assign hcrhportstatus_5_ccs_we = addr_hit[25] & reg_we & !reg_error;
  assign hcrhportstatus_5_ccs_wd = reg_wdata[0];

  assign hcrhportstatus_5_pes_we = addr_hit[25] & reg_we & !reg_error;
  assign hcrhportstatus_5_pes_wd = reg_wdata[1];

  assign hcrhportstatus_5_pss_we = addr_hit[25] & reg_we & !reg_error;
  assign hcrhportstatus_5_pss_wd = reg_wdata[2];

  assign hcrhportstatus_5_poci_we = addr_hit[25] & reg_we & !reg_error;
  assign hcrhportstatus_5_poci_wd = reg_wdata[3];

  assign hcrhportstatus_5_prs_we = addr_hit[25] & reg_we & !reg_error;
  assign hcrhportstatus_5_prs_wd = reg_wdata[4];

  assign hcrhportstatus_5_pps_we = addr_hit[25] & reg_we & !reg_error;
  assign hcrhportstatus_5_pps_wd = reg_wdata[8];

  assign hcrhportstatus_5_lsda_we = addr_hit[25] & reg_we & !reg_error;
  assign hcrhportstatus_5_lsda_wd = reg_wdata[9];

  assign hcrhportstatus_5_csc_we = addr_hit[25] & reg_we & !reg_error;
  assign hcrhportstatus_5_csc_wd = reg_wdata[16];

  assign hcrhportstatus_5_pesc_we = addr_hit[25] & reg_we & !reg_error;
  assign hcrhportstatus_5_pesc_wd = reg_wdata[17];

  assign hcrhportstatus_5_pssc_we = addr_hit[25] & reg_we & !reg_error;
  assign hcrhportstatus_5_pssc_wd = reg_wdata[18];

  assign hcrhportstatus_5_ocic_we = addr_hit[25] & reg_we & !reg_error;
  assign hcrhportstatus_5_ocic_wd = reg_wdata[19];

  assign hcrhportstatus_5_prsc_we = addr_hit[25] & reg_we & !reg_error;
  assign hcrhportstatus_5_prsc_wd = reg_wdata[20];

  assign hcrhportstatus_6_ccs_we = addr_hit[26] & reg_we & !reg_error;
  assign hcrhportstatus_6_ccs_wd = reg_wdata[0];

  assign hcrhportstatus_6_pes_we = addr_hit[26] & reg_we & !reg_error;
  assign hcrhportstatus_6_pes_wd = reg_wdata[1];

  assign hcrhportstatus_6_pss_we = addr_hit[26] & reg_we & !reg_error;
  assign hcrhportstatus_6_pss_wd = reg_wdata[2];

  assign hcrhportstatus_6_poci_we = addr_hit[26] & reg_we & !reg_error;
  assign hcrhportstatus_6_poci_wd = reg_wdata[3];

  assign hcrhportstatus_6_prs_we = addr_hit[26] & reg_we & !reg_error;
  assign hcrhportstatus_6_prs_wd = reg_wdata[4];

  assign hcrhportstatus_6_pps_we = addr_hit[26] & reg_we & !reg_error;
  assign hcrhportstatus_6_pps_wd = reg_wdata[8];

  assign hcrhportstatus_6_lsda_we = addr_hit[26] & reg_we & !reg_error;
  assign hcrhportstatus_6_lsda_wd = reg_wdata[9];

  assign hcrhportstatus_6_csc_we = addr_hit[26] & reg_we & !reg_error;
  assign hcrhportstatus_6_csc_wd = reg_wdata[16];

  assign hcrhportstatus_6_pesc_we = addr_hit[26] & reg_we & !reg_error;
  assign hcrhportstatus_6_pesc_wd = reg_wdata[17];

  assign hcrhportstatus_6_pssc_we = addr_hit[26] & reg_we & !reg_error;
  assign hcrhportstatus_6_pssc_wd = reg_wdata[18];

  assign hcrhportstatus_6_ocic_we = addr_hit[26] & reg_we & !reg_error;
  assign hcrhportstatus_6_ocic_wd = reg_wdata[19];

  assign hcrhportstatus_6_prsc_we = addr_hit[26] & reg_we & !reg_error;
  assign hcrhportstatus_6_prsc_wd = reg_wdata[20];

  assign hcrhportstatus_7_ccs_we = addr_hit[27] & reg_we & !reg_error;
  assign hcrhportstatus_7_ccs_wd = reg_wdata[0];

  assign hcrhportstatus_7_pes_we = addr_hit[27] & reg_we & !reg_error;
  assign hcrhportstatus_7_pes_wd = reg_wdata[1];

  assign hcrhportstatus_7_pss_we = addr_hit[27] & reg_we & !reg_error;
  assign hcrhportstatus_7_pss_wd = reg_wdata[2];

  assign hcrhportstatus_7_poci_we = addr_hit[27] & reg_we & !reg_error;
  assign hcrhportstatus_7_poci_wd = reg_wdata[3];

  assign hcrhportstatus_7_prs_we = addr_hit[27] & reg_we & !reg_error;
  assign hcrhportstatus_7_prs_wd = reg_wdata[4];

  assign hcrhportstatus_7_pps_we = addr_hit[27] & reg_we & !reg_error;
  assign hcrhportstatus_7_pps_wd = reg_wdata[8];

  assign hcrhportstatus_7_lsda_we = addr_hit[27] & reg_we & !reg_error;
  assign hcrhportstatus_7_lsda_wd = reg_wdata[9];

  assign hcrhportstatus_7_csc_we = addr_hit[27] & reg_we & !reg_error;
  assign hcrhportstatus_7_csc_wd = reg_wdata[16];

  assign hcrhportstatus_7_pesc_we = addr_hit[27] & reg_we & !reg_error;
  assign hcrhportstatus_7_pesc_wd = reg_wdata[17];

  assign hcrhportstatus_7_pssc_we = addr_hit[27] & reg_we & !reg_error;
  assign hcrhportstatus_7_pssc_wd = reg_wdata[18];

  assign hcrhportstatus_7_ocic_we = addr_hit[27] & reg_we & !reg_error;
  assign hcrhportstatus_7_ocic_wd = reg_wdata[19];

  assign hcrhportstatus_7_prsc_we = addr_hit[27] & reg_we & !reg_error;
  assign hcrhportstatus_7_prsc_wd = reg_wdata[20];

  assign hcrhportstatus_8_ccs_we = addr_hit[28] & reg_we & !reg_error;
  assign hcrhportstatus_8_ccs_wd = reg_wdata[0];

  assign hcrhportstatus_8_pes_we = addr_hit[28] & reg_we & !reg_error;
  assign hcrhportstatus_8_pes_wd = reg_wdata[1];

  assign hcrhportstatus_8_pss_we = addr_hit[28] & reg_we & !reg_error;
  assign hcrhportstatus_8_pss_wd = reg_wdata[2];

  assign hcrhportstatus_8_poci_we = addr_hit[28] & reg_we & !reg_error;
  assign hcrhportstatus_8_poci_wd = reg_wdata[3];

  assign hcrhportstatus_8_prs_we = addr_hit[28] & reg_we & !reg_error;
  assign hcrhportstatus_8_prs_wd = reg_wdata[4];

  assign hcrhportstatus_8_pps_we = addr_hit[28] & reg_we & !reg_error;
  assign hcrhportstatus_8_pps_wd = reg_wdata[8];

  assign hcrhportstatus_8_lsda_we = addr_hit[28] & reg_we & !reg_error;
  assign hcrhportstatus_8_lsda_wd = reg_wdata[9];

  assign hcrhportstatus_8_csc_we = addr_hit[28] & reg_we & !reg_error;
  assign hcrhportstatus_8_csc_wd = reg_wdata[16];

  assign hcrhportstatus_8_pesc_we = addr_hit[28] & reg_we & !reg_error;
  assign hcrhportstatus_8_pesc_wd = reg_wdata[17];

  assign hcrhportstatus_8_pssc_we = addr_hit[28] & reg_we & !reg_error;
  assign hcrhportstatus_8_pssc_wd = reg_wdata[18];

  assign hcrhportstatus_8_ocic_we = addr_hit[28] & reg_we & !reg_error;
  assign hcrhportstatus_8_ocic_wd = reg_wdata[19];

  assign hcrhportstatus_8_prsc_we = addr_hit[28] & reg_we & !reg_error;
  assign hcrhportstatus_8_prsc_wd = reg_wdata[20];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[7:0] = hcrevision_rev_qs;
        reg_rdata_next[31:8] = hcrevision_reserved_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[1:0] = hccontrol_cbsr_qs;
        reg_rdata_next[2] = hccontrol_ple_qs;
        reg_rdata_next[3] = hccontrol_ie_qs;
        reg_rdata_next[4] = hccontrol_cle_qs;
        reg_rdata_next[5] = hccontrol_ble_qs;
        reg_rdata_next[7:6] = hccontrol_hcfs_qs;
        reg_rdata_next[8] = hccontrol_ir_qs;
        reg_rdata_next[9] = hccontrol_rwc_qs;
        reg_rdata_next[10] = hccontrol_rwe_qs;
        reg_rdata_next[31:11] = hccontrol_reserved_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = hccommandstatus_hcr_qs;
        reg_rdata_next[1] = hccommandstatus_clf_qs;
        reg_rdata_next[2] = hccommandstatus_blf_qs;
        reg_rdata_next[3] = hccommandstatus_ocr_qs;
        reg_rdata_next[15:4] = hccommandstatus_reservedlower_qs;
        reg_rdata_next[17:16] = hccommandstatus_soc_qs;
        reg_rdata_next[31:18] = hccommandstatus_reservedupper_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = hcinterruptstatus_so_qs;
        reg_rdata_next[1] = hcinterruptstatus_wdh_qs;
        reg_rdata_next[2] = hcinterruptstatus_sf_qs;
        reg_rdata_next[3] = hcinterruptstatus_rd_qs;
        reg_rdata_next[4] = hcinterruptstatus_ue_qs;
        reg_rdata_next[5] = hcinterruptstatus_fno_qs;
        reg_rdata_next[6] = hcinterruptstatus_rhsc_qs;
        reg_rdata_next[29:7] = hcinterruptstatus_reservedlower_qs;
        reg_rdata_next[30] = hcinterruptstatus_oc_qs;
        reg_rdata_next[31] = hcinterruptstatus_reservedupper_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = hcinterruptenable_so_qs;
        reg_rdata_next[1] = hcinterruptenable_wdh_qs;
        reg_rdata_next[2] = hcinterruptenable_sf_qs;
        reg_rdata_next[3] = hcinterruptenable_rd_qs;
        reg_rdata_next[4] = hcinterruptenable_ue_qs;
        reg_rdata_next[5] = hcinterruptenable_fno_qs;
        reg_rdata_next[6] = hcinterruptenable_rhcs_qs;
        reg_rdata_next[29:7] = hcinterruptenable_reserved_qs;
        reg_rdata_next[30] = hcinterruptenable_oc_qs;
        reg_rdata_next[31] = hcinterruptenable_mie_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = hcinterruptdisable_so_qs;
        reg_rdata_next[1] = hcinterruptdisable_wdh_qs;
        reg_rdata_next[2] = hcinterruptdisable_sf_qs;
        reg_rdata_next[3] = hcinterruptdisable_rd_qs;
        reg_rdata_next[4] = hcinterruptdisable_ue_qs;
        reg_rdata_next[5] = hcinterruptdisable_fno_qs;
        reg_rdata_next[6] = hcinterruptdisable_rhcs_qs;
        reg_rdata_next[29:7] = hcinterruptdisable_reserved_qs;
        reg_rdata_next[30] = hcinterruptdisable_oc_qs;
        reg_rdata_next[31] = hcinterruptdisable_mie_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[7:0] = hchcaa_zero_qs;
        reg_rdata_next[31:8] = hchcaa_hcca_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[3:0] = hcperiodcurrented_zero_qs;
        reg_rdata_next[31:4] = hcperiodcurrented_pced_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[3:0] = hccontrolheaded_zero_qs;
        reg_rdata_next[31:4] = hccontrolheaded_ched_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[3:0] = hccontrolcurrented_zero_qs;
        reg_rdata_next[31:4] = hccontrolcurrented_cced_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[3:0] = hcbulkheaded_zero_qs;
        reg_rdata_next[31:4] = hcbulkheaded_bhed_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[3:0] = hcbulkcurrented_zero_qs;
        reg_rdata_next[31:4] = hcbulkcurrented_bced_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[3:0] = hcdonehead_zero_qs;
        reg_rdata_next[31:4] = hcdonehead_dh_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[13:0] = hcfminterval_fi_qs;
        reg_rdata_next[15:14] = hcfminterval_reserved_qs;
        reg_rdata_next[30:16] = hcfminterval_fsmps_qs;
        reg_rdata_next[31] = hcfminterval_fit_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[13:0] = hcfmremaining_fr_qs;
        reg_rdata_next[30:14] = hcfmremaining_reserved_qs;
        reg_rdata_next[31] = hcfmremaining_frt_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[15:0] = hcfmnumber_fn_qs;
        reg_rdata_next[31:16] = hcfmnumber_reserved_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[13:0] = hcperiodicstart_ps_qs;
        reg_rdata_next[31:14] = hcperiodicstart_reserved_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[11:0] = hclsthreshold_lst_qs;
        reg_rdata_next[31:12] = hclsthreshold_reserved_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[7:0] = hcrhdescriptora_ndp_qs;
        reg_rdata_next[8] = hcrhdescriptora_nps_qs;
        reg_rdata_next[9] = hcrhdescriptora_psm_qs;
        reg_rdata_next[10] = hcrhdescriptora_dt_qs;
        reg_rdata_next[11] = hcrhdescriptora_ocpm_qs;
        reg_rdata_next[12] = hcrhdescriptora_nocp_qs;
        reg_rdata_next[23:13] = hcrhdescriptora_reserved_qs;
        reg_rdata_next[31:24] = hcrhdescriptora_potpgt_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[15:0] = hcrhdescriptorb_dr_qs;
        reg_rdata_next[31:16] = hcrhdescriptorb_ppcm_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = hcrhstatus_lps_qs;
        reg_rdata_next[1] = hcrhstatus_oci_qs;
        reg_rdata_next[14:2] = hcrhstatus_reservedlower_qs;
        reg_rdata_next[15] = hcrhstatus_drwe_qs;
        reg_rdata_next[16] = hcrhstatus_lpsc_qs;
        reg_rdata_next[17] = hcrhstatus_ocic_qs;
        reg_rdata_next[30:18] = hcrhstatus_reservedupper_qs;
        reg_rdata_next[31] = '0;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = hcrhportstatus_1_ccs_qs;
        reg_rdata_next[1] = hcrhportstatus_1_pes_qs;
        reg_rdata_next[2] = hcrhportstatus_1_pss_qs;
        reg_rdata_next[3] = hcrhportstatus_1_poci_qs;
        reg_rdata_next[4] = hcrhportstatus_1_prs_qs;
        reg_rdata_next[7:5] = hcrhportstatus_1_reservedlower_qs;
        reg_rdata_next[8] = hcrhportstatus_1_pps_qs;
        reg_rdata_next[9] = hcrhportstatus_1_lsda_qs;
        reg_rdata_next[15:10] = hcrhportstatus_1_reservedmid_qs;
        reg_rdata_next[16] = hcrhportstatus_1_csc_qs;
        reg_rdata_next[17] = hcrhportstatus_1_pesc_qs;
        reg_rdata_next[18] = hcrhportstatus_1_pssc_qs;
        reg_rdata_next[19] = hcrhportstatus_1_ocic_qs;
        reg_rdata_next[20] = hcrhportstatus_1_prsc_qs;
        reg_rdata_next[31:21] = hcrhportstatus_1_reservedupper_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = hcrhportstatus_2_ccs_qs;
        reg_rdata_next[1] = hcrhportstatus_2_pes_qs;
        reg_rdata_next[2] = hcrhportstatus_2_pss_qs;
        reg_rdata_next[3] = hcrhportstatus_2_poci_qs;
        reg_rdata_next[4] = hcrhportstatus_2_prs_qs;
        reg_rdata_next[7:5] = hcrhportstatus_2_reservedlower_qs;
        reg_rdata_next[8] = hcrhportstatus_2_pps_qs;
        reg_rdata_next[9] = hcrhportstatus_2_lsda_qs;
        reg_rdata_next[15:10] = hcrhportstatus_2_reservedmid_qs;
        reg_rdata_next[16] = hcrhportstatus_2_csc_qs;
        reg_rdata_next[17] = hcrhportstatus_2_pesc_qs;
        reg_rdata_next[18] = hcrhportstatus_2_pssc_qs;
        reg_rdata_next[19] = hcrhportstatus_2_ocic_qs;
        reg_rdata_next[20] = hcrhportstatus_2_prsc_qs;
        reg_rdata_next[31:21] = hcrhportstatus_2_reservedupper_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[0] = hcrhportstatus_3_ccs_qs;
        reg_rdata_next[1] = hcrhportstatus_3_pes_qs;
        reg_rdata_next[2] = hcrhportstatus_3_pss_qs;
        reg_rdata_next[3] = hcrhportstatus_3_poci_qs;
        reg_rdata_next[4] = hcrhportstatus_3_prs_qs;
        reg_rdata_next[7:5] = hcrhportstatus_3_reservedlower_qs;
        reg_rdata_next[8] = hcrhportstatus_3_pps_qs;
        reg_rdata_next[9] = hcrhportstatus_3_lsda_qs;
        reg_rdata_next[15:10] = hcrhportstatus_3_reservedmid_qs;
        reg_rdata_next[16] = hcrhportstatus_3_csc_qs;
        reg_rdata_next[17] = hcrhportstatus_3_pesc_qs;
        reg_rdata_next[18] = hcrhportstatus_3_pssc_qs;
        reg_rdata_next[19] = hcrhportstatus_3_ocic_qs;
        reg_rdata_next[20] = hcrhportstatus_3_prsc_qs;
        reg_rdata_next[31:21] = hcrhportstatus_3_reservedupper_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = hcrhportstatus_4_ccs_qs;
        reg_rdata_next[1] = hcrhportstatus_4_pes_qs;
        reg_rdata_next[2] = hcrhportstatus_4_pss_qs;
        reg_rdata_next[3] = hcrhportstatus_4_poci_qs;
        reg_rdata_next[4] = hcrhportstatus_4_prs_qs;
        reg_rdata_next[7:5] = hcrhportstatus_4_reservedlower_qs;
        reg_rdata_next[8] = hcrhportstatus_4_pps_qs;
        reg_rdata_next[9] = hcrhportstatus_4_lsda_qs;
        reg_rdata_next[15:10] = hcrhportstatus_4_reservedmid_qs;
        reg_rdata_next[16] = hcrhportstatus_4_csc_qs;
        reg_rdata_next[17] = hcrhportstatus_4_pesc_qs;
        reg_rdata_next[18] = hcrhportstatus_4_pssc_qs;
        reg_rdata_next[19] = hcrhportstatus_4_ocic_qs;
        reg_rdata_next[20] = hcrhportstatus_4_prsc_qs;
        reg_rdata_next[31:21] = hcrhportstatus_4_reservedupper_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[0] = hcrhportstatus_5_ccs_qs;
        reg_rdata_next[1] = hcrhportstatus_5_pes_qs;
        reg_rdata_next[2] = hcrhportstatus_5_pss_qs;
        reg_rdata_next[3] = hcrhportstatus_5_poci_qs;
        reg_rdata_next[4] = hcrhportstatus_5_prs_qs;
        reg_rdata_next[7:5] = hcrhportstatus_5_reservedlower_qs;
        reg_rdata_next[8] = hcrhportstatus_5_pps_qs;
        reg_rdata_next[9] = hcrhportstatus_5_lsda_qs;
        reg_rdata_next[15:10] = hcrhportstatus_5_reservedmid_qs;
        reg_rdata_next[16] = hcrhportstatus_5_csc_qs;
        reg_rdata_next[17] = hcrhportstatus_5_pesc_qs;
        reg_rdata_next[18] = hcrhportstatus_5_pssc_qs;
        reg_rdata_next[19] = hcrhportstatus_5_ocic_qs;
        reg_rdata_next[20] = hcrhportstatus_5_prsc_qs;
        reg_rdata_next[31:21] = hcrhportstatus_5_reservedupper_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = hcrhportstatus_6_ccs_qs;
        reg_rdata_next[1] = hcrhportstatus_6_pes_qs;
        reg_rdata_next[2] = hcrhportstatus_6_pss_qs;
        reg_rdata_next[3] = hcrhportstatus_6_poci_qs;
        reg_rdata_next[4] = hcrhportstatus_6_prs_qs;
        reg_rdata_next[7:5] = hcrhportstatus_6_reservedlower_qs;
        reg_rdata_next[8] = hcrhportstatus_6_pps_qs;
        reg_rdata_next[9] = hcrhportstatus_6_lsda_qs;
        reg_rdata_next[15:10] = hcrhportstatus_6_reservedmid_qs;
        reg_rdata_next[16] = hcrhportstatus_6_csc_qs;
        reg_rdata_next[17] = hcrhportstatus_6_pesc_qs;
        reg_rdata_next[18] = hcrhportstatus_6_pssc_qs;
        reg_rdata_next[19] = hcrhportstatus_6_ocic_qs;
        reg_rdata_next[20] = hcrhportstatus_6_prsc_qs;
        reg_rdata_next[31:21] = hcrhportstatus_6_reservedupper_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[0] = hcrhportstatus_7_ccs_qs;
        reg_rdata_next[1] = hcrhportstatus_7_pes_qs;
        reg_rdata_next[2] = hcrhportstatus_7_pss_qs;
        reg_rdata_next[3] = hcrhportstatus_7_poci_qs;
        reg_rdata_next[4] = hcrhportstatus_7_prs_qs;
        reg_rdata_next[7:5] = hcrhportstatus_7_reservedlower_qs;
        reg_rdata_next[8] = hcrhportstatus_7_pps_qs;
        reg_rdata_next[9] = hcrhportstatus_7_lsda_qs;
        reg_rdata_next[15:10] = hcrhportstatus_7_reservedmid_qs;
        reg_rdata_next[16] = hcrhportstatus_7_csc_qs;
        reg_rdata_next[17] = hcrhportstatus_7_pesc_qs;
        reg_rdata_next[18] = hcrhportstatus_7_pssc_qs;
        reg_rdata_next[19] = hcrhportstatus_7_ocic_qs;
        reg_rdata_next[20] = hcrhportstatus_7_prsc_qs;
        reg_rdata_next[31:21] = hcrhportstatus_7_reservedupper_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = hcrhportstatus_8_ccs_qs;
        reg_rdata_next[1] = hcrhportstatus_8_pes_qs;
        reg_rdata_next[2] = hcrhportstatus_8_pss_qs;
        reg_rdata_next[3] = hcrhportstatus_8_poci_qs;
        reg_rdata_next[4] = hcrhportstatus_8_prs_qs;
        reg_rdata_next[7:5] = hcrhportstatus_8_reservedlower_qs;
        reg_rdata_next[8] = hcrhportstatus_8_pps_qs;
        reg_rdata_next[9] = hcrhportstatus_8_lsda_qs;
        reg_rdata_next[15:10] = hcrhportstatus_8_reservedmid_qs;
        reg_rdata_next[16] = hcrhportstatus_8_csc_qs;
        reg_rdata_next[17] = hcrhportstatus_8_pesc_qs;
        reg_rdata_next[18] = hcrhportstatus_8_pssc_qs;
        reg_rdata_next[19] = hcrhportstatus_8_ocic_qs;
        reg_rdata_next[20] = hcrhportstatus_8_prsc_qs;
        reg_rdata_next[31:21] = hcrhportstatus_8_reservedupper_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module newusb_reg_top_intf
#(
  parameter int AW = 7,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output newusb_reg_pkg::newusb_reg2hw_t reg2hw, // Write
  input  newusb_reg_pkg::newusb_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  newusb_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


